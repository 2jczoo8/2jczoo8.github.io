{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/maupassant/source/css/copycode.scss","path":"css/copycode.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/copyright.scss","path":"css/copyright.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/donate.scss","path":"css/donate.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/search.scss","path":"css/search.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/copycode.js","path":"js/copycode.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/copyright.js","path":"js/copyright.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/love.js","path":"js/love.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/recent-comments.js","path":"js/recent-comments.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/0000.md","hash":"b880e324a5433b65c285c7beb093edb5b646ed9a","modified":1728815943226},{"_id":"source/_posts/0001.md","hash":"462f631022ee831368aa831f1f4b8b3a33367528","modified":1728815943226},{"_id":"source/_posts/0002.md","hash":"1e7aca5bbd14ca44db141b3e909e55d08fb03044","modified":1728815943226},{"_id":"themes/maupassant/.gitignore","hash":"16945417d10c15c950306794dbb0d970b5a199fe","modified":1728815943226},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1728815943226},{"_id":"themes/maupassant/LICENSE","hash":"f0ac2f92770650c9835183f79010c0d307b34acd","modified":1728815943226},{"_id":"themes/maupassant/README.md","hash":"c6da8254deefb8054dfb3e174f6113b860ccde69","modified":1728815943226},{"_id":"themes/maupassant/_config.yml","hash":"3bb63e8371bdbdecc71a60b77cd4fe0771ba039a","modified":1728815943226},{"_id":"themes/maupassant/package.json","hash":"f092433469eb87362e831326425a6a5c3c9fea0d","modified":1728815943226},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1728815943226},{"_id":"themes/maupassant/languages/en.yml","hash":"27d8484ce29989317624e9852c5495289fe5501c","modified":1728815943226},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1728815943226},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1728815943226},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1728815943226},{"_id":"themes/maupassant/languages/nb-NO.yml","hash":"dfef2a8f7582f9bccf7cf8376fb2b96c1e452d5f","modified":1728815943226},{"_id":"themes/maupassant/languages/ru.yml","hash":"2476a631f4d3c668de04af85a6c2c97ba2a57e96","modified":1728815943226},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"433484ab11838cc8540aceaf13eb718fa180ed9c","modified":1728815943226},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"58905c7fa82ee4f2232bcd00301dfcd7b711c61e","modified":1728815943226},{"_id":"themes/maupassant/layout/archive.pug","hash":"9bf5245929529576b5d6678142276adf3c221a6d","modified":1728815943226},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"6b1ff15ae71223ef2cae1a56e40d2354cf40ff31","modified":1728815943226},{"_id":"themes/maupassant/layout/base.pug","hash":"ebfbb48e5f4b6810d5ea0b9e1bb252196ff698e8","modified":1728815943226},{"_id":"themes/maupassant/layout/blogroll.pug","hash":"31106223b01f45ab0b9747f91db104b0f0d1d4cc","modified":1728815943226},{"_id":"themes/maupassant/layout/index.pug","hash":"3e71a8b314b57a3e8b9f1d275c482361025afb23","modified":1728815943226},{"_id":"themes/maupassant/layout/page.pug","hash":"9b72086ff877de064f804a59684140af09470484","modified":1728815943226},{"_id":"themes/maupassant/layout/post.pug","hash":"f69362f8bffcccf696f793b6084cdec773b85cc1","modified":1728815943226},{"_id":"themes/maupassant/layout/single-column.pug","hash":"0593f261dc208bb0b5c4232eb41eff597a291bd9","modified":1728815943226},{"_id":"themes/maupassant/layout/tagcloud.pug","hash":"5c06b2a267070bd866b911cc894f314e97dfe2b4","modified":1728815943226},{"_id":"themes/maupassant/layout/timeline.pug","hash":"cef82a79f57e4e491f2934d990da939c4bebceb6","modified":1728815943226},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"e3e3edc6bccc3e9b111eeefade998784a147266d","modified":1728815943226},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"046d6453fd31e338b8cc9311dc8b6d86a9cca074","modified":1728815943226},{"_id":"themes/maupassant/layout/_partial/darkmode.pug","hash":"82567449d68025cc7fee5259d4769f5ee015aa26","modified":1728815943226},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"650781b5bc8c632658ad6880ba663b1e3bfb5798","modified":1728815943226},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"a0dbd6ca60ff37f6c4f0aa89ee018b4c37b3d71e","modified":1728815943226},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1728815943226},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1728815943226},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"f91a71eb8a1af225a4f0f7749fedf534cc0ceae0","modified":1728815943226},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1728815943226},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1728815943226},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"a21ffd35f129244729ad64128cafe4781447c96d","modified":1728815943226},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1728815943226},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"7dde69ef8f86745b83ba5f03c75717a782752f2b","modified":1728815943226},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"f2e9f6ff02b858b507f61768753b54846491f87a","modified":1728815943226},{"_id":"themes/maupassant/layout/_widget/copyright.pug","hash":"17e68ea3e87f128819d16ec30cd506a51fe80a7f","modified":1728815943226},{"_id":"themes/maupassant/layout/_widget/donate.pug","hash":"859eddafd2762072bc5af850038ff377578b0ce4","modified":1728815943226},{"_id":"themes/maupassant/layout/_widget/info.pug","hash":"82359802de5a4e3d80ec9a3737b071fd5c3be221","modified":1728815943226},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"3f6048423887f359bb97d17621e961495d209a7c","modified":1728815943226},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"e63c9f0a770324a03146fc263f3000c7cdc59631","modified":1728815943226},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"5a86fcd97933c665b5afef701d8b30cfd2952691","modified":1728815943226},{"_id":"themes/maupassant/source/css/copyright.scss","hash":"a418da11a88d1feb14500df42ed97a64da6a7611","modified":1728815943226},{"_id":"themes/maupassant/source/css/donate.scss","hash":"95b2fd65042afecc0b5530847c369bcc11d74bd0","modified":1728815943226},{"_id":"themes/maupassant/source/css/search.scss","hash":"9406e138d7bb6a9ef4a067eba1dafa627519c8a7","modified":1728815943226},{"_id":"themes/maupassant/source/css/style.scss","hash":"388b9d5d850c042da2997d17c90a99fb83cb0150","modified":1728815943226},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1728815943226},{"_id":"themes/maupassant/source/img/avatar.png","hash":"2f701dadc2dc8eb637f48b5eedf9bca7fb5fd031","modified":1728815943226},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1728815943226},{"_id":"themes/maupassant/source/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1728815943226},{"_id":"themes/maupassant/source/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1728815943226},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1728815943226},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1728815943226},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1728815943226},{"_id":"themes/maupassant/source/js/copycode.js","hash":"fde1f153bab1f00ae8930668094c00aa9ff3c7a3","modified":1728815943226},{"_id":"themes/maupassant/source/js/copyright.js","hash":"7b1bd775ea22abf33d57f78628f436bf656e439a","modified":1728815943230},{"_id":"themes/maupassant/source/js/donate.js","hash":"bdddd8d9847462d020f7a511e7e12c046223195d","modified":1728815943230},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"0ec64dd79760e01f7d88611b1bd5221ec30b80cb","modified":1728815943230},{"_id":"themes/maupassant/source/js/love.js","hash":"5cf89f622bf891cf1986845eb92eadef6f358eb7","modified":1728815943230},{"_id":"themes/maupassant/source/js/recent-comments.js","hash":"78708f86aa1fdcc003a056b1f91aac62d31bb012","modified":1728815943230},{"_id":"themes/maupassant/source/js/search.js","hash":"6fdfd143646d12b8dbef9b5809cea768192f08aa","modified":1728815943230},{"_id":"themes/maupassant/source/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1728815943230},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1728815943230},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1728815943230},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"9b73975ac67b471ae91803b8477932d2c5e5a4f2","modified":1728815943226},{"_id":"themes/maupassant/source/css/copycode.scss","hash":"e2463b8dacf629e180a1b6cd80667ca8044292eb","modified":1728815943226},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"a141293ce93b312f4db9f28207d02ee578ede359","modified":1728815943226},{"_id":"public/search.xml","hash":"fdd570fa950ab2aba2fadef47e8910b20a51ab14","modified":1728815962912},{"_id":"public/2024/10/09/0002/index.html","hash":"980b6befa2c235c1c1504b5b0e56df2e96f05028","modified":1728815962912},{"_id":"public/2024/08/29/0001/index.html","hash":"c75f723b108d9a01cdeb77e7fd167020b49aab60","modified":1728815962912},{"_id":"public/2024/08/25/0000/index.html","hash":"90a6ec3ad32ea3108e07be36e8d252fc94a15114","modified":1728815962912},{"_id":"public/archives/index.html","hash":"4913c1c0d6329d162eca5f22219a2461daa00047","modified":1728815962912},{"_id":"public/archives/2024/index.html","hash":"4913c1c0d6329d162eca5f22219a2461daa00047","modified":1728815962912},{"_id":"public/archives/2024/08/index.html","hash":"256bf4bd1c1e1e9881b49b2e2e51d6a2d012900b","modified":1728815962912},{"_id":"public/archives/2024/10/index.html","hash":"30c2307875904be994d7288feeaf33e33c9ab9fd","modified":1728815962912},{"_id":"public/categories/随笔/index.html","hash":"ff6c78c0ba136e5b4cb1672bcb7f5b53de4b5cfa","modified":1728815962912},{"_id":"public/categories/做题记录/index.html","hash":"daf7cfc51880bad776c7619ce073d6a4ff7a53e0","modified":1728815962912},{"_id":"public/index.html","hash":"454b4f9c9e49890c66dc557e9968ed1420aa713f","modified":1728815962912},{"_id":"public/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1728815962912},{"_id":"public/img/avatar.png","hash":"2f701dadc2dc8eb637f48b5eedf9bca7fb5fd031","modified":1728815962912},{"_id":"public/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1728815962912},{"_id":"public/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1728815962912},{"_id":"public/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1728815962912},{"_id":"public/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1728815962912},{"_id":"public/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1728815962912},{"_id":"public/css/copycode.css","hash":"803d8bf898f47c3929665eb7af97da22f11efacd","modified":1728815962912},{"_id":"public/css/copyright.css","hash":"e857156bd1f971fe6abdc22d2b8c82e495387438","modified":1728815962912},{"_id":"public/css/donate.css","hash":"d631def20dfb661439c506f28dc791f331d506f8","modified":1728815962912},{"_id":"public/css/search.css","hash":"0d0f73b357c3bc5077ef657c73f679b22bea93fb","modified":1728815962912},{"_id":"public/css/style.css","hash":"b8bd7e1fcd5abf50d3c11028d1da3b6f0b4cf5c8","modified":1728815962912},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1728815962912},{"_id":"public/js/copycode.js","hash":"fde1f153bab1f00ae8930668094c00aa9ff3c7a3","modified":1728815962912},{"_id":"public/js/copyright.js","hash":"7b1bd775ea22abf33d57f78628f436bf656e439a","modified":1728815962912},{"_id":"public/js/donate.js","hash":"bdddd8d9847462d020f7a511e7e12c046223195d","modified":1728815962912},{"_id":"public/js/fancybox.js","hash":"0ec64dd79760e01f7d88611b1bd5221ec30b80cb","modified":1728815962912},{"_id":"public/js/love.js","hash":"5cf89f622bf891cf1986845eb92eadef6f358eb7","modified":1728815962912},{"_id":"public/js/recent-comments.js","hash":"78708f86aa1fdcc003a056b1f91aac62d31bb012","modified":1728815962912},{"_id":"public/js/search.js","hash":"6fdfd143646d12b8dbef9b5809cea768192f08aa","modified":1728815962912},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1728815962912},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1728815962912},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1728815962912},{"_id":"source/favicon.ico","hash":"f97229749d1111b0f6009a79ca528d016216b3a6","modified":1728816070522},{"_id":"public/favicon.ico","hash":"f97229749d1111b0f6009a79ca528d016216b3a6","modified":1728816085367}],"Category":[{"name":"随笔","_id":"cm27gdyu70002p59l75m54mm5"},{"name":"做题记录","_id":"cm27gdyu90004p59lhgmtado5"}],"Data":[],"Page":[],"Post":[{"title":"Hello！","date":"2024-08-25T16:00:00.000Z","toc":true,"mathjax":true,"_content":"### 前言\n\n转战github博客了，OI退役之后会在上面更文章的，我也不打算把cnblogs和洛谷文章搬运过来了。\n\n主要是因为cnblogs感觉要倒闭了，洛谷文章自由度太低，就投靠了github。暂时没有自己搭服务器的想法，以后可能会的。\n\n感谢Bot-wxt1221的帮助，没有他的帮助就没有这个博客。\n\n这篇博客大概就更些学习笔记，做题记录，随笔啥的。\n\n### 关于我\n\n目前是个普通高中生，坐标SC-CD。\n\n喜欢足球、游戏、数学。\n\n学习笔记应该就是记一些数学、计算机相关的东西\n\n做题记录应该就是记一些CP题和MO题\n\n随笔想写啥就写啥。\n","source":"_posts/0000.md","raw":"---\ntitle: Hello！\ndate: 2024-08-26\ntoc: true\ncategory: [随笔]\nmathjax: true\n---\n### 前言\n\n转战github博客了，OI退役之后会在上面更文章的，我也不打算把cnblogs和洛谷文章搬运过来了。\n\n主要是因为cnblogs感觉要倒闭了，洛谷文章自由度太低，就投靠了github。暂时没有自己搭服务器的想法，以后可能会的。\n\n感谢Bot-wxt1221的帮助，没有他的帮助就没有这个博客。\n\n这篇博客大概就更些学习笔记，做题记录，随笔啥的。\n\n### 关于我\n\n目前是个普通高中生，坐标SC-CD。\n\n喜欢足球、游戏、数学。\n\n学习笔记应该就是记一些数学、计算机相关的东西\n\n做题记录应该就是记一些CP题和MO题\n\n随笔想写啥就写啥。\n","slug":"0000","published":1,"updated":"2024-10-13T10:39:03.226Z","comments":1,"layout":"post","photos":[],"_id":"cm27gdyu20000p59lhxme1mle","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>转战github博客了，OI退役之后会在上面更文章的，我也不打算把cnblogs和洛谷文章搬运过来了。</p>\n<p>主要是因为cnblogs感觉要倒闭了，洛谷文章自由度太低，就投靠了github。暂时没有自己搭服务器的想法，以后可能会的。</p>\n<p>感谢Bot-wxt1221的帮助，没有他的帮助就没有这个博客。</p>\n<p>这篇博客大概就更些学习笔记，做题记录，随笔啥的。</p>\n<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>目前是个普通高中生，坐标SC-CD。</p>\n<p>喜欢足球、游戏、数学。</p>\n<p>学习笔记应该就是记一些数学、计算机相关的东西</p>\n<p>做题记录应该就是记一些CP题和MO题</p>\n<p>随笔想写啥就写啥。</p>\n","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>转战github博客了，OI退役之后会在上面更文章的，我也不打算把cnblogs和洛谷文章搬运过来了。</p>\n<p>主要是因为cnblogs感觉要倒闭了，洛谷文章自由度太低，就投靠了github。暂时没有自己搭服务器的想法，以后可能会的。</p>\n<p>感谢Bot-wxt1221的帮助，没有他的帮助就没有这个博客。</p>\n<p>这篇博客大概就更些学习笔记，做题记录，随笔啥的。</p>\n<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>目前是个普通高中生，坐标SC-CD。</p>\n<p>喜欢足球、游戏、数学。</p>\n<p>学习笔记应该就是记一些数学、计算机相关的东西</p>\n<p>做题记录应该就是记一些CP题和MO题</p>\n<p>随笔想写啥就写啥。</p>\n"},{"title":"有趣数学题1","date":"2024-08-29T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n晚上睡不着刷知乎，突然给我推送了这个问题，有人邀请我回答。\n\n我看了看，小东西挺别致，给他做了。\n\n下图是问题：\n\n![](https://s2.loli.net/2024/08/30/zvEdq85a2Nwp3lP.jpg)\n\n以下是我的解答：\n\n首先 $n=2$ 时显然合法。探索若最大值大于 $2$ 时的性质。\n\n先规定符号：\n\n任选三组人记为 $S_1,S_2,S_3$，记数列 $x_1,x_2,x_3$ 分别表示在上述3个集合中任选1个，2个，3个集合的交集大小的和。\n\n$Lemma 1.$ 此时任意两组人所组成的集合交集必定为2。\n\n证明：\n\n易知 $x_1=18$\n\n假设 $S_1 \\cap S_2 = \\emptyset$。\n\n$\\Rightarrow S_1 \\cup S_2 = U$\n\n$\\Rightarrow S_1 \\cup S_2 \\cup S_3 = U$\n\n同时 $x_3 = 0$\n\n此时三元容斥得 $x_1 - x_2 + x_3 = U$\n\n带入数据得 $x_2=6$\n\n$\\Rightarrow |S_1 \\cap S_2| + |S_1 \\cap S_3| + |S_2 \\cap S_3|=6$\n\n$\\Rightarrow |S_1 \\cap S_3| + |S_2 \\cap S_3|=6$\n\n$\\Rightarrow \\min (|S_1 \\cap S_3| , |S_2 \\cap S_3|) \\ge 3$\n\n故假设不成立。同上易得 $|S_1 \\cap S_2|=1$ 也不合法。证毕。\n\n$Lemma 2.$ 此时任意三组人交集为空集，任意三组并集为全集\n\n由 $Lemma 1$ 和三元容斥易得 $18 - 6 + x_3 = |S_1 \\cup S_2 \\cup S_3|$\n\n又因为 $x_3 \\ge 0$ $\\Rightarrow |S_1 \\cup S_2 \\cup S_3| \\ge 12$\n\n同时 $\\Rightarrow |S_1 \\cup S_2 \\cup S_3| \\le 12$\n\n$\\Rightarrow |S_1 \\cup S_2 \\cup S_3| = 12$\n\n$\\Rightarrow x_3 = 0$ 证毕。\n\n现在来证明 $n$ 一定小于 5。\n\n若 $n \\ge 5$，任选5组人记为 $S_1,S_2,S_3,S_4,S_5$，记数列 $x_1,x_2,x_3,x_4,x_5$ 分别表示在上述5个集合中任选1个，2个，3个，4个，5个集合的交集大小的和。\n\n容斥原理和上述引理易得 $x_1-x_2+x_3-x_4+x_5=12$\n\n化简并代入数据 $x_5-x_4 = 12$ 等式显然不成立。证毕。\n\n此时给出一组 $n=4$ 的构造，\n\n$1,2,3,4,5,6$\n\n$1,2,7,8,9,10$\n\n$3,4,7,8,11,12$\n\n$5,6,9,10,11,12$\n\n故n的最大值为4。\n","source":"_posts/0001.md","raw":"---\ntitle: 有趣数学题1\ndate: 2024-08-30\ntoc: true\ncategory: [做题记录]\nmathjax: true\n---\n\n晚上睡不着刷知乎，突然给我推送了这个问题，有人邀请我回答。\n\n我看了看，小东西挺别致，给他做了。\n\n下图是问题：\n\n![](https://s2.loli.net/2024/08/30/zvEdq85a2Nwp3lP.jpg)\n\n以下是我的解答：\n\n首先 $n=2$ 时显然合法。探索若最大值大于 $2$ 时的性质。\n\n先规定符号：\n\n任选三组人记为 $S_1,S_2,S_3$，记数列 $x_1,x_2,x_3$ 分别表示在上述3个集合中任选1个，2个，3个集合的交集大小的和。\n\n$Lemma 1.$ 此时任意两组人所组成的集合交集必定为2。\n\n证明：\n\n易知 $x_1=18$\n\n假设 $S_1 \\cap S_2 = \\emptyset$。\n\n$\\Rightarrow S_1 \\cup S_2 = U$\n\n$\\Rightarrow S_1 \\cup S_2 \\cup S_3 = U$\n\n同时 $x_3 = 0$\n\n此时三元容斥得 $x_1 - x_2 + x_3 = U$\n\n带入数据得 $x_2=6$\n\n$\\Rightarrow |S_1 \\cap S_2| + |S_1 \\cap S_3| + |S_2 \\cap S_3|=6$\n\n$\\Rightarrow |S_1 \\cap S_3| + |S_2 \\cap S_3|=6$\n\n$\\Rightarrow \\min (|S_1 \\cap S_3| , |S_2 \\cap S_3|) \\ge 3$\n\n故假设不成立。同上易得 $|S_1 \\cap S_2|=1$ 也不合法。证毕。\n\n$Lemma 2.$ 此时任意三组人交集为空集，任意三组并集为全集\n\n由 $Lemma 1$ 和三元容斥易得 $18 - 6 + x_3 = |S_1 \\cup S_2 \\cup S_3|$\n\n又因为 $x_3 \\ge 0$ $\\Rightarrow |S_1 \\cup S_2 \\cup S_3| \\ge 12$\n\n同时 $\\Rightarrow |S_1 \\cup S_2 \\cup S_3| \\le 12$\n\n$\\Rightarrow |S_1 \\cup S_2 \\cup S_3| = 12$\n\n$\\Rightarrow x_3 = 0$ 证毕。\n\n现在来证明 $n$ 一定小于 5。\n\n若 $n \\ge 5$，任选5组人记为 $S_1,S_2,S_3,S_4,S_5$，记数列 $x_1,x_2,x_3,x_4,x_5$ 分别表示在上述5个集合中任选1个，2个，3个，4个，5个集合的交集大小的和。\n\n容斥原理和上述引理易得 $x_1-x_2+x_3-x_4+x_5=12$\n\n化简并代入数据 $x_5-x_4 = 12$ 等式显然不成立。证毕。\n\n此时给出一组 $n=4$ 的构造，\n\n$1,2,3,4,5,6$\n\n$1,2,7,8,9,10$\n\n$3,4,7,8,11,12$\n\n$5,6,9,10,11,12$\n\n故n的最大值为4。\n","slug":"0001","published":1,"updated":"2024-10-13T10:39:03.226Z","comments":1,"layout":"post","photos":[],"_id":"cm27gdyu50001p59l1m5v7vf6","content":"<p>晚上睡不着刷知乎，突然给我推送了这个问题，有人邀请我回答。</p>\n<p>我看了看，小东西挺别致，给他做了。</p>\n<p>下图是问题：</p>\n<p><img src=\"https://s2.loli.net/2024/08/30/zvEdq85a2Nwp3lP.jpg\" alt=\"\"></p>\n<p>以下是我的解答：</p>\n<p>首先 $n=2$ 时显然合法。探索若最大值大于 $2$ 时的性质。</p>\n<p>先规定符号：</p>\n<p>任选三组人记为 $S_1,S_2,S_3$，记数列 $x_1,x_2,x_3$ 分别表示在上述3个集合中任选1个，2个，3个集合的交集大小的和。</p>\n<p>$Lemma 1.$ 此时任意两组人所组成的集合交集必定为2。</p>\n<p>证明：</p>\n<p>易知 $x_1=18$</p>\n<p>假设 $S_1 \\cap S_2 = \\emptyset$。</p>\n<p>$\\Rightarrow S_1 \\cup S_2 = U$</p>\n<p>$\\Rightarrow S_1 \\cup S_2 \\cup S_3 = U$</p>\n<p>同时 $x_3 = 0$</p>\n<p>此时三元容斥得 $x_1 - x_2 + x_3 = U$</p>\n<p>带入数据得 $x_2=6$</p>\n<p>$\\Rightarrow |S_1 \\cap S_2| + |S_1 \\cap S_3| + |S_2 \\cap S_3|=6$</p>\n<p>$\\Rightarrow |S_1 \\cap S_3| + |S_2 \\cap S_3|=6$</p>\n<p>$\\Rightarrow \\min (|S_1 \\cap S_3| , |S_2 \\cap S_3|) \\ge 3$</p>\n<p>故假设不成立。同上易得 $|S_1 \\cap S_2|=1$ 也不合法。证毕。</p>\n<p>$Lemma 2.$ 此时任意三组人交集为空集，任意三组并集为全集</p>\n<p>由 $Lemma 1$ 和三元容斥易得 $18 - 6 + x_3 = |S_1 \\cup S_2 \\cup S_3|$</p>\n<p>又因为 $x_3 \\ge 0$ $\\Rightarrow |S_1 \\cup S_2 \\cup S_3| \\ge 12$</p>\n<p>同时 $\\Rightarrow |S_1 \\cup S_2 \\cup S_3| \\le 12$</p>\n<p>$\\Rightarrow |S_1 \\cup S_2 \\cup S_3| = 12$</p>\n<p>$\\Rightarrow x_3 = 0$ 证毕。</p>\n<p>现在来证明 $n$ 一定小于 5。</p>\n<p>若 $n \\ge 5$，任选5组人记为 $S_1,S_2,S_3,S_4,S_5$，记数列 $x_1,x_2,x_3,x_4,x_5$ 分别表示在上述5个集合中任选1个，2个，3个，4个，5个集合的交集大小的和。</p>\n<p>容斥原理和上述引理易得 $x_1-x_2+x_3-x_4+x_5=12$</p>\n<p>化简并代入数据 $x_5-x_4 = 12$ 等式显然不成立。证毕。</p>\n<p>此时给出一组 $n=4$ 的构造，</p>\n<p>$1,2,3,4,5,6$</p>\n<p>$1,2,7,8,9,10$</p>\n<p>$3,4,7,8,11,12$</p>\n<p>$5,6,9,10,11,12$</p>\n<p>故n的最大值为4。</p>\n","excerpt":"","more":"<p>晚上睡不着刷知乎，突然给我推送了这个问题，有人邀请我回答。</p>\n<p>我看了看，小东西挺别致，给他做了。</p>\n<p>下图是问题：</p>\n<p><img src=\"https://s2.loli.net/2024/08/30/zvEdq85a2Nwp3lP.jpg\" alt=\"\"></p>\n<p>以下是我的解答：</p>\n<p>首先 $n=2$ 时显然合法。探索若最大值大于 $2$ 时的性质。</p>\n<p>先规定符号：</p>\n<p>任选三组人记为 $S_1,S_2,S_3$，记数列 $x_1,x_2,x_3$ 分别表示在上述3个集合中任选1个，2个，3个集合的交集大小的和。</p>\n<p>$Lemma 1.$ 此时任意两组人所组成的集合交集必定为2。</p>\n<p>证明：</p>\n<p>易知 $x_1=18$</p>\n<p>假设 $S_1 \\cap S_2 = \\emptyset$。</p>\n<p>$\\Rightarrow S_1 \\cup S_2 = U$</p>\n<p>$\\Rightarrow S_1 \\cup S_2 \\cup S_3 = U$</p>\n<p>同时 $x_3 = 0$</p>\n<p>此时三元容斥得 $x_1 - x_2 + x_3 = U$</p>\n<p>带入数据得 $x_2=6$</p>\n<p>$\\Rightarrow |S_1 \\cap S_2| + |S_1 \\cap S_3| + |S_2 \\cap S_3|=6$</p>\n<p>$\\Rightarrow |S_1 \\cap S_3| + |S_2 \\cap S_3|=6$</p>\n<p>$\\Rightarrow \\min (|S_1 \\cap S_3| , |S_2 \\cap S_3|) \\ge 3$</p>\n<p>故假设不成立。同上易得 $|S_1 \\cap S_2|=1$ 也不合法。证毕。</p>\n<p>$Lemma 2.$ 此时任意三组人交集为空集，任意三组并集为全集</p>\n<p>由 $Lemma 1$ 和三元容斥易得 $18 - 6 + x_3 = |S_1 \\cup S_2 \\cup S_3|$</p>\n<p>又因为 $x_3 \\ge 0$ $\\Rightarrow |S_1 \\cup S_2 \\cup S_3| \\ge 12$</p>\n<p>同时 $\\Rightarrow |S_1 \\cup S_2 \\cup S_3| \\le 12$</p>\n<p>$\\Rightarrow |S_1 \\cup S_2 \\cup S_3| = 12$</p>\n<p>$\\Rightarrow x_3 = 0$ 证毕。</p>\n<p>现在来证明 $n$ 一定小于 5。</p>\n<p>若 $n \\ge 5$，任选5组人记为 $S_1,S_2,S_3,S_4,S_5$，记数列 $x_1,x_2,x_3,x_4,x_5$ 分别表示在上述5个集合中任选1个，2个，3个，4个，5个集合的交集大小的和。</p>\n<p>容斥原理和上述引理易得 $x_1-x_2+x_3-x_4+x_5=12$</p>\n<p>化简并代入数据 $x_5-x_4 = 12$ 等式显然不成立。证毕。</p>\n<p>此时给出一组 $n=4$ 的构造，</p>\n<p>$1,2,3,4,5,6$</p>\n<p>$1,2,7,8,9,10$</p>\n<p>$3,4,7,8,11,12$</p>\n<p>$5,6,9,10,11,12$</p>\n<p>故n的最大值为4。</p>\n"},{"title":"CF/AtC乱做记录","date":"2024-10-09T16:00:00.000Z","toc":false,"mathjax":true,"_content":"同步于[洛谷专栏](https://www.luogu.com.cn/article/fcbug12f)\n\n马上也快退役了，干点自己想干的事吧，别太功利了。 \n\n早就想开这个记录了，碍于之前学校各种各样的题单让我没时间做（其实时间是颓没的）。\n\n现在感觉做啥都也无所谓了，开始记录吧！\n\n本博客就简单记录一下，就记个大体思路。\n\n### 1.CF1773G Game of Questions *2800\n\n很神的状压DP啊，发现人数不多遂想到状压一下人数，设 $dp_S$ 表示场上只剩状态为 $S$ 的人，然后Genie赢的概率。\n\n难点在于转移，我们并不知道有哪些问题之前被问过，但是状压问题的话就太夸张了。注意到一个性质，一个问题问几遍都和问一遍等价。这个性质看上去很显然，但却是转移的关键所在。设 $w_{S,T}$ 表示从能让状态 $S$ 变成状态 $T$ 的问题个数。预处理出 $w$ 再DP即可。\n\n### 2.CF1775F Laboratory on Pluto *2500\n\n牛的数学题，感觉真不错。第一问是简单的，一边取成 $\\sqrt{n}$ 就是最小值。虽然我不是很会证，但你要枚举根号做好像也能过。\n\n主要是这个第二问的数数就比较困难，考虑连通块的形式，就是一个矩形四缺口这种感觉，但是缺口一定是阶梯状的，就意味着求的是拆分数，可以dp求解。求完了一个角上的方案数就背包一下就行了。这题牛就牛在单步似乎都很好想，合在一起就有点困难了，但也其实还好，我自己做的时候就是拆分数那里有点不会，可以看看 P1025 srf的那篇DP题解，学一下k部拆分数的DP求法，感觉挺妙的。\n\n### 3.AGC045A Xor Battle *2000\n\n很有趣的一道博弈论题目。还好开了题解，不然死都不会做。考虑从后往前枚举，设集合 $S_i$ 表示从 $i$ 开始走，有哪些数能使0赢。考虑使用线性基进行转移即可。\n\n### 4.AGC043D Merge Triplets *2700\n\n非常秀的DP题，考虑答案的形状。答案排列按下降段划分每一段都不会超过二，而且长为1的段一定比2的多。\n\n此乃本题第一秀。于是我们设计出状态 $dp_{i,j}$ 表示填到了第 $i$ 个位置长为1的段比长为2的段多了 $j$ 个的方案数。\n\n考虑转移，观察排列，按照偏序关系建出一棵外向树，用数拓扑序的方式进行DP，此乃二秀。\n\n### 5.ARC093E Bichrome Spanning Tree *2500\n\n非常牛的数数题。考虑原图的最小生成树，如果mst都比 $x$ 大，那肯定是没有方案的。 如果mst和 $x$ 一样大。那就意味着能够成mst的边必有异色，这个是好数的。另外一种困难些，考虑钦定一条边在权为 $x$ 的生成树中，那他这棵生成树是包含它的最小生成树，必定与一棵原图的最小生成树有交，构成最小生成树的边一定同色，这样数数就方便了许多。\n\n### 6.ABC279G At Most 2 Colors *2400\n\n牛的DP题，考虑状态设计，设 $dp_{i , 1/2}$ 表示填到 $i$ 这个位置时，最后 $k-1$ 个位置有几种不同颜色，$k-1$ 这个地方设计的有点巧妙，我也是这个地方想不到。如果光设计个 $k$,那么 $i - k$ 这个位置填啥又跟 $i$ 这个位置填啥没关系，会影响转移，换成 $k-1$ 就不会了。关键是求答案时答案对吗？看看自己的方程，是不是同时保证了后k个也只有两个颜色了呢。\n\n### 7.CF1385G Columns Swaps *2300\n\n2-sat 板子，无需多言\n\n### 8.ABC281G Farthest City *2300\n\n看你想不想的到BFS树结构，想到了就是一道简单DP。\n\n### 9.CF1657E Star MST *2200\n\n找到边权之间的偏序关系，有一个跟上一题类似的DP。\n\n### 10.ARC103F Distance Sums *2800\n\n妙妙构造题，非常的神奇。一看一个没思路。观察一下，发现d值最大的一定是某个叶子，d值最小的一定是重心。\n\n然后就考虑从叶子开始向上构造推测父亲是谁（钦定重心为根）。类似换根DP去转移然后二分推出父亲即可。\n\n### 11.ARC006D Median Pyramid Hard * 3000\n\n人才题。考虑二分？为什么要考虑这个？或许是因为中位数题好多都要二分。二分什么？二分答案。我们将大于二分出来的东西的数都看作是1其他看作是0，那么只需要关注顶部数的01情况，而这取决于最靠近中间的相同数对是0还是1，于是做完了。\n\n### 12.CF1659E AND-MEX Walk *2200\n\n考虑答案的范围，容易发现答案只有可能是0,1,2，分别使用并查集判断一下即可。\n\n### 13.CF1473E Minimum Path *2400\n\n模拟赛原题，有点牛的。要求的式子很有最短路的感觉，式子的本质是抽出一条最长的换上一条最短的。\n\nOK，比较美妙的一步来了。要想用最短路去求解，那么必须把后面那一坨塞进 $\\sum$ 里面去。\n\n刚刚想了式子的本质，现在扩展一下，任选两条边，用一条去换另一条的最小值，此时茅塞顿开，这个问题就可以用分层图最短路进行求解了。\n\n### 14.ARC127E Priority Queue *2700\n\n比较感性的一个题。正难则反，考虑计算被删除的集合的方案数，容易发现每个删除位置都有取值范围，而且还有一个奇奇怪怪的性质，每一次删的数都可以是离该次删除最接近的1，这样不会影响方案数，交换法不难证明。此时上文的取值范围也可以用类似于括号配对的方法求出来。既然集合计数那我就钦定一下数列是单调递增的，同时发现如果单增数列能取到，单增数列的排列也能取，反之同理，于是乎DP即可。\n\n感性就感性在每个性质看上去好像很显然证起来还是有一些困难的。\n\n### 15.ARC180D Division into 3 *2700\n\n放在任务里面吃灰的，今天终于给他做了。算是一种套路题吧？观察到区间最大值一定会被取到，分类讨论一下在哪个段。\n\n在A/C段中就用扫描线算答案，在B中就只让AC取左右端点各一个，这题也就完了。感觉还是很神奇，从一个显然的性质推导出来整个做法\n\n### 16.CF335F Buy One, Get One Free *3000\n\n反悔贪心神仙题，反悔策略怎么想出来的，大概率是用归纳法。显然是把序列从大到小排个序，同样代价的物品就分为一组，按组进行考虑。维护一个小根堆记录当前白嫖的东西的价值，每次先算出当前这一轮一开始就可以白嫖多少个，先不忙压入小根堆避免造成影响。剩下的东西就考虑是买好还是不买好，按反悔贪心策略执行即可（不想细说了，毕竟不是题解）。\n\n### 17.CF516D Drazil and Morning Exercise *2800\n\n询问次数只有50，考虑使用大于 O(n) 复杂度的东西执行单次询问。\n\n思考怎么样才能使联通块的计算更加方便，钦定一个根，枚举联通块的根。\n\n然后呢，要是联通块的 max，min 的差值求起来方便就更好了。\n\n不妨让他随层数单调，如何实现，以f最小的点为根即可，每次询问树上差分。\n\n### 18.ARC167C MST on Line++ *2400\n\n考虑数每个 $a_i$ 在 MST 中的出现次数。容易发现 $a_i$ 的顺序与答案没啥关系。接下来的一步比较神秘，考虑一个子问题，如果只能选小于等于 $a_i$ 的边，最多能选多少条，把每个排列的答案加起来，记为 $f_i$，那么 $ans=\\sum_{i=1}^{n} a_i \\times f_i$，组合求 $f_i$ 即可。\n\n### 19.ARC123D Inc, Dec - Decomposition *2100\n\n简单题啊，居然有自己能很快做出来的题，尝试构造 $b,c$，这是简单的，感性理解一下，然后三分一下偏差值就是答案了。\n\n三分可以理解正确性，但是为什么想我那样构造就是答案了呢，其他的构造方法对吗？感觉很奇怪啊。\n\n### 20.CF1270H Number of Components *3300\n\n先发现一个性质：如果 $l$ 和 $r$ 在一个联通块内，那么 $[l , r]$ 就都在一个联通块内，证明是容易的。\n\n发现了这个性质之后，我们只需要求 $i$ 和 $i + 1$ 是否在一个联通块内。具体的判断方式是 $\\min_{j=1} ^{i} a_j \\ge max_{j=i+1}^{n} a_j$。记 $w=max_{j=i+1}^{n} a_j$，把数组内大于 $w$ 的设为 $1$，否则设为 $0$。如果 $i$ 和 $i + 1$ 不在同一联通块内那么二进制序列会长成 $11...100...0$ 这个样子，对于每个w维护一下10段的个数即可。\n\n### 21.CF1548E Gregor and the Two Painters *3400\n\n可以说是一种套路题吧，数网格联通块通用方法就是选个主元，去数有多少个主元，转化成求解偏序问题即可。\n\n注意主元和联通块要有双射关系，不然就假了。这个方法也可以做 SCCPC2024 A 虽然那个题有更简单的方法。\n\n### 22.CF1656G Cycle Palindrome *3200\n\n先考虑构造一组满足回文的排列，再考虑交换相同值的位置使得在同一个环中。\n\n然后再四个四个地换，判一下就行。正确性证明是困难的，不证了。\n\n### 23.ARC156D Xor Sum 5 *2600\n记一个牛逼结论：**若组合数 $\\binom{n}{m}$ 是奇数，那么在二进制下，m是n的子集**\n\n推论：**$\\binom{n}{c1,c2,c3…ck}$为奇数，那么c是n的某一子集的一组二进制划分**\n\n我们就记 $c_i$ 表示第 $i$ 个数的出现次数，当他的sum有贡献时，他就是上文的推论。\n\n所以发现最多40个 $c_i$ 是非零的，于是乎就可以DP了。\n\n### 24.ABC271G Access Counter * 2300\n\n很难不想到矩阵快速幂，但是问题在于我怎么构造矩阵，这是本题的难点。\n\n首先是容易设计出基本DP的， $dp_{i,j}=\\sum_{k=1}^{24}dp_{i-1,k}\\times calc(k,j)$\n\ncalc通过一些基本数列手段可以是可以处理出来的，然后挂到矩阵这题也就结束了。\n\n### 25.CF1042E Vasya and Magic Matrix *2300\n\n朴素的期望DP，好像期望DP都是倒着的，大概就是从终状态转移到始状态的意思。\n\n矩阵的壳是个幌子，根本无需在意，把每个东西单拎出来按权排序后DP即可。\n\n### 26.CF1552E Colors and Intervals *2300\n\n牛的构造题，先观察到每次选的两个点之间一定没有和它们同色的点，不然一定不优。\n\n每个东西被覆盖的次数限制很奇怪，考虑它的意义是什么。看见分母的 $k-1$ 不难联想到同一颜色的段数，那么考虑按段的编号分类，每个段就选限制个颜色即可。\n\n### 27.CF1635F Closest Pair *2800\n\n结论题，设 $L_i$ 表示 $i$ 左边第一个 $w$ 小于等于 i的点，$R_i$ 同理。\n\n那么答案就在 $[L_i,i],[i,R_i]$ 中。转化为二维数点问题即可。\n\n### 28.CF1868C Travel Plan *2400\n\n式子题，考虑对于满二叉树怎么做，会了这个就把原数拆成 $logn$ 个满二叉树即可。\n\n具体的，枚举最大值，记 $ans_i$ 表示最大值 $\\le i$ 的答案，那么最后答案就是 $\\sum_{i=1}^{m}i\\times (ans_i - ans_{i-1})$\n\n对于具体的转移不多赘述，主要就是记两个东西，一个表示这个子树所有东西到根的答案和子树内所以东西的填法的和。\n\n### 29.CF599E Sandy and Nuts *2600\n\n困难的，状态想错了导致举步维艰，想到状态之后这题并不困难，主要是处理限制的时候要稍微注意一下细节。状态是 $dp_{i,S}$ 表示以 $i$ 为根的子树内的点集为 $S$ 的合法方案数。方程就是 $dp_{i,S}=\\sum_{T\\in S} dp_{u,T}\\times dp_{i , S\\oplus T}$。使用钦定技巧避免算重。\n\n### 30.CF623D Birthday *2700\n\n难点解析：揣测出题人。\n\n为啥不让你求模意义下的答案，精度误差为啥允许开这么大，样例解释为啥没有计算过程？有没有种可能，真实值根本算不出来？\n\n想到这里这题大概也就迎刃而解了，计算k轮猜到答案的概率。直接做不好做，考虑容斥进行计算。具体的，计算在最多 $k$ 轮的时候结束的概率。要是知道每个人被猜到几次的话就很容易算概率了。列出式子，每一步贪心即可。收敛速度较快，计算 $3e5$ 次即可通过此题。\n\n### 31.CF407D Largest Submatrix 3 *2700\n\n不难想到 $O(n^4)$ 暴力，枚举行的上下界，对列跑双指针。这个算法难以优化，更换枚举次序。枚举左右界再枚举下边界，类似于区间DP得去转移答案。（子矩阵背景的题目从来没有自己做出来过，呜呜呜）\n\n### 32.CF1844G Tree Weight *3000\n\n牛逼题目，这辈子没见过这么秀的。\n\n首先容易把 $d_i$ 拆成 $dep_i + dep_{i + 1} - 2 \\times dep_{lca(i,i+1)}$\n\n然后就会发现这个东西非常不优美，要是能够拆出来的东西少带点变量就好了，因为 $dep_1$ 我们是知道的，他就是0。少带点变量就会使得这个式子可以递推了！**注意到lca前面有个系数2，对等式两边取个2的模这个东西就没了！** 然后我们就可以考虑按二进制位进行递推了。具体的，设 $ans_{i,j}\\equiv dep_{i} \\mod 2^j$。 那么有 $ans_{i,j}={(d(i-1,i)-ans_{i-1,j}+2\\times ans_{lca(i-1,i),j-1})} \\mod 2^j$最后判一下-1即可。注意力惊人的人可以独立做出来，可惜我不是。\n\n### 33.CF1762D GCD Queries *2100\n\n似乎是比较容易的。其实无非就是就是让你每两次操作排除一个非零的数。按顺序遍历配合上指针优化再加上简单的分讨即可。\n\n### 34.CF1406E Deleting Numbers *2600\n\n非常厉害的交互！有点人类智慧的感觉。\n\n首先是容易想到一个每个质数操作两次在log一下的方法，算算发现操作次数会超。\n\n考虑优化。显然对于上述做法而言，质数这个点是不会变的，那能不能让没啥用每个质数只操作1次呢。\n\n可以的，我们依次对每个质数操作B，然后计算出理论答案，要是不一样的话我们就check一下它的幂次。\n\n可是这样对于最小的质数而言，我们就没法求了。所以每过根号次操作就做一遍 A 1。要是有出入就把块内所有东西都判一遍即可。\n\n### 35.CF1033E Hidden Bipartite Graph *2800\n\n也是非常厉害的交互！更加的人类智慧！\n\n积累一种不一样的判二分图的trick：图中抽一棵生成树，看一下奇数层的点之间有没有连边，偶数层之间有没有连边。\n\n对于这个题而言我们可以先用 $2nlogn$ 次询问分治的去问出一棵生成树来。然后我们再在奇偶层之间随机分治看看有没连边。很巧妙的是这个随机分治，每次把点集大小除以二而且每一层期望操作次数只有两次，非常聪明啊！\n\n### 36.CF1863G Swaps *2800\n\n套路题？容易想到 $a_i$ 向 $i$ 连条边。然后观察一次操作带来的影响，发现一次操作带来一个自环。同时可以构建出一个双射：能生成的序列可以这样构成：如果 $i$ 的入边被操作过，那么这个位置就是 $i$，否则就是一条未被标记的出边指向的点权，这是容易计数的，注意在联通块为环时特殊处理一下即可。\n\n### 37.JOISC2015 F 合鍵\n\n非常好题目，让我认识到自己的不足：对于奇怪的模型就失去了分析的能力。\n\n**容易想到** 把 $l,r$ 拆开一起排序，分讨每一段的贡献情况，然后DP统计贡献即可。\n\n### 38.ABC373G No Cross Matching *2400\n\n场上的时候有种流子的感觉，但是不会建模。现在会了神秘贪心。\n\n非常厉害的转化，相交线段可以通过交换变得不相交，这会使得总距离变短，那么我们是需要让总距离最短即可，按照冒泡排序模拟即可。\n\n### 39.Yahoo Programming Contest 2019 Odd Subrectangles *2600\n\n容易想到转化为异或为1。考虑现在已经选出了一些行，那些列符合答案，记第 $i$ 列的异或和为 $c_i$ ，只要有一个 $c_i$ 等于1，那么这就意味着方案数是 $2^{m-1}$，其他列情况任选，用这一列来调整即可。那么现在思考怎么选行能够使得至少有一个1，把每行当成一个二进制数，这个问题就转化成了怎么选使异或和部位0，为0是简单的，记 $x$ 表示线性基的大小，然后异或和为0的方案数就是 $2^{n - x}$，证明原理和刚才一样。\n\n### 40.CF513D Constrained Tree *2600\n\n自己的思路是转化成偏序问题后瞎构造，不会证明正确性，也没有实践，来记个题解做法。\n\n大概就是去dfs，dfs(u) 表示 $u$ 是一个叶子时的可行性，然后简单判断几下递归下去是简单的。\n\n### 41.CF1699E Three Days Grace *2600\n\n这题DP？我咋想到？分析整个删数的过程，容易发现就是分解而已。想到去枚举一个最小值，让最大值最小，考虑 $dp_{i,j}$ 表示分解出来最小的数比 $i$ 大，最大的数最小是多少，发现转移是调和级数级别的，双指针找答案即可。\n\n### 42.CF547D Mike and Fish *2600\n\n这种染色问题再配上这个网格图背景，很难不让人想到二分图染色。考虑怎么进行染色，有一种很简单的方法是相同横或纵坐标的点两两配对，要是剩一个就不管了，不难证明这是正确的。\n\n### 43.CF1253F Cheap Robot *2500\n\n感觉是困难的。遇到这种图上多询问的问题就先不要往什么LCT这种东西方面去思考，实在不行再试试，然后考虑对于单个询问怎么做，要求的答案根据什么量推出来，把图上有用的东西再留下来，看看在树上怎么做。这题就这样的，看两个相邻的充电站想要抵达对 $c$ 的限制是什么，化成一个关于c的不等式，然后放在重构树上询问就可以了。\n\n### 44.CF53E Dead Ends *2500\n\n似乎是简单的，反正我秒了。看见数据范围这样的小，看来是DP状态需要两个状压维，那DP状态就出来了, $dp_{S,T}$ 表示形成的生成树是 $S$ 集合，度为一的点是 $T$ 集合，发现要算重，再回头看看转移方程，是不是方案算了 $popcount(T)$ 次呢？所以除一下就好了。\n","source":"_posts/0002.md","raw":"---\ntitle: CF/AtC乱做记录\ndate: 2024-10-10\ntoc: false\ncategory: [做题记录]\nmathjax: true\n---\n同步于[洛谷专栏](https://www.luogu.com.cn/article/fcbug12f)\n\n马上也快退役了，干点自己想干的事吧，别太功利了。 \n\n早就想开这个记录了，碍于之前学校各种各样的题单让我没时间做（其实时间是颓没的）。\n\n现在感觉做啥都也无所谓了，开始记录吧！\n\n本博客就简单记录一下，就记个大体思路。\n\n### 1.CF1773G Game of Questions *2800\n\n很神的状压DP啊，发现人数不多遂想到状压一下人数，设 $dp_S$ 表示场上只剩状态为 $S$ 的人，然后Genie赢的概率。\n\n难点在于转移，我们并不知道有哪些问题之前被问过，但是状压问题的话就太夸张了。注意到一个性质，一个问题问几遍都和问一遍等价。这个性质看上去很显然，但却是转移的关键所在。设 $w_{S,T}$ 表示从能让状态 $S$ 变成状态 $T$ 的问题个数。预处理出 $w$ 再DP即可。\n\n### 2.CF1775F Laboratory on Pluto *2500\n\n牛的数学题，感觉真不错。第一问是简单的，一边取成 $\\sqrt{n}$ 就是最小值。虽然我不是很会证，但你要枚举根号做好像也能过。\n\n主要是这个第二问的数数就比较困难，考虑连通块的形式，就是一个矩形四缺口这种感觉，但是缺口一定是阶梯状的，就意味着求的是拆分数，可以dp求解。求完了一个角上的方案数就背包一下就行了。这题牛就牛在单步似乎都很好想，合在一起就有点困难了，但也其实还好，我自己做的时候就是拆分数那里有点不会，可以看看 P1025 srf的那篇DP题解，学一下k部拆分数的DP求法，感觉挺妙的。\n\n### 3.AGC045A Xor Battle *2000\n\n很有趣的一道博弈论题目。还好开了题解，不然死都不会做。考虑从后往前枚举，设集合 $S_i$ 表示从 $i$ 开始走，有哪些数能使0赢。考虑使用线性基进行转移即可。\n\n### 4.AGC043D Merge Triplets *2700\n\n非常秀的DP题，考虑答案的形状。答案排列按下降段划分每一段都不会超过二，而且长为1的段一定比2的多。\n\n此乃本题第一秀。于是我们设计出状态 $dp_{i,j}$ 表示填到了第 $i$ 个位置长为1的段比长为2的段多了 $j$ 个的方案数。\n\n考虑转移，观察排列，按照偏序关系建出一棵外向树，用数拓扑序的方式进行DP，此乃二秀。\n\n### 5.ARC093E Bichrome Spanning Tree *2500\n\n非常牛的数数题。考虑原图的最小生成树，如果mst都比 $x$ 大，那肯定是没有方案的。 如果mst和 $x$ 一样大。那就意味着能够成mst的边必有异色，这个是好数的。另外一种困难些，考虑钦定一条边在权为 $x$ 的生成树中，那他这棵生成树是包含它的最小生成树，必定与一棵原图的最小生成树有交，构成最小生成树的边一定同色，这样数数就方便了许多。\n\n### 6.ABC279G At Most 2 Colors *2400\n\n牛的DP题，考虑状态设计，设 $dp_{i , 1/2}$ 表示填到 $i$ 这个位置时，最后 $k-1$ 个位置有几种不同颜色，$k-1$ 这个地方设计的有点巧妙，我也是这个地方想不到。如果光设计个 $k$,那么 $i - k$ 这个位置填啥又跟 $i$ 这个位置填啥没关系，会影响转移，换成 $k-1$ 就不会了。关键是求答案时答案对吗？看看自己的方程，是不是同时保证了后k个也只有两个颜色了呢。\n\n### 7.CF1385G Columns Swaps *2300\n\n2-sat 板子，无需多言\n\n### 8.ABC281G Farthest City *2300\n\n看你想不想的到BFS树结构，想到了就是一道简单DP。\n\n### 9.CF1657E Star MST *2200\n\n找到边权之间的偏序关系，有一个跟上一题类似的DP。\n\n### 10.ARC103F Distance Sums *2800\n\n妙妙构造题，非常的神奇。一看一个没思路。观察一下，发现d值最大的一定是某个叶子，d值最小的一定是重心。\n\n然后就考虑从叶子开始向上构造推测父亲是谁（钦定重心为根）。类似换根DP去转移然后二分推出父亲即可。\n\n### 11.ARC006D Median Pyramid Hard * 3000\n\n人才题。考虑二分？为什么要考虑这个？或许是因为中位数题好多都要二分。二分什么？二分答案。我们将大于二分出来的东西的数都看作是1其他看作是0，那么只需要关注顶部数的01情况，而这取决于最靠近中间的相同数对是0还是1，于是做完了。\n\n### 12.CF1659E AND-MEX Walk *2200\n\n考虑答案的范围，容易发现答案只有可能是0,1,2，分别使用并查集判断一下即可。\n\n### 13.CF1473E Minimum Path *2400\n\n模拟赛原题，有点牛的。要求的式子很有最短路的感觉，式子的本质是抽出一条最长的换上一条最短的。\n\nOK，比较美妙的一步来了。要想用最短路去求解，那么必须把后面那一坨塞进 $\\sum$ 里面去。\n\n刚刚想了式子的本质，现在扩展一下，任选两条边，用一条去换另一条的最小值，此时茅塞顿开，这个问题就可以用分层图最短路进行求解了。\n\n### 14.ARC127E Priority Queue *2700\n\n比较感性的一个题。正难则反，考虑计算被删除的集合的方案数，容易发现每个删除位置都有取值范围，而且还有一个奇奇怪怪的性质，每一次删的数都可以是离该次删除最接近的1，这样不会影响方案数，交换法不难证明。此时上文的取值范围也可以用类似于括号配对的方法求出来。既然集合计数那我就钦定一下数列是单调递增的，同时发现如果单增数列能取到，单增数列的排列也能取，反之同理，于是乎DP即可。\n\n感性就感性在每个性质看上去好像很显然证起来还是有一些困难的。\n\n### 15.ARC180D Division into 3 *2700\n\n放在任务里面吃灰的，今天终于给他做了。算是一种套路题吧？观察到区间最大值一定会被取到，分类讨论一下在哪个段。\n\n在A/C段中就用扫描线算答案，在B中就只让AC取左右端点各一个，这题也就完了。感觉还是很神奇，从一个显然的性质推导出来整个做法\n\n### 16.CF335F Buy One, Get One Free *3000\n\n反悔贪心神仙题，反悔策略怎么想出来的，大概率是用归纳法。显然是把序列从大到小排个序，同样代价的物品就分为一组，按组进行考虑。维护一个小根堆记录当前白嫖的东西的价值，每次先算出当前这一轮一开始就可以白嫖多少个，先不忙压入小根堆避免造成影响。剩下的东西就考虑是买好还是不买好，按反悔贪心策略执行即可（不想细说了，毕竟不是题解）。\n\n### 17.CF516D Drazil and Morning Exercise *2800\n\n询问次数只有50，考虑使用大于 O(n) 复杂度的东西执行单次询问。\n\n思考怎么样才能使联通块的计算更加方便，钦定一个根，枚举联通块的根。\n\n然后呢，要是联通块的 max，min 的差值求起来方便就更好了。\n\n不妨让他随层数单调，如何实现，以f最小的点为根即可，每次询问树上差分。\n\n### 18.ARC167C MST on Line++ *2400\n\n考虑数每个 $a_i$ 在 MST 中的出现次数。容易发现 $a_i$ 的顺序与答案没啥关系。接下来的一步比较神秘，考虑一个子问题，如果只能选小于等于 $a_i$ 的边，最多能选多少条，把每个排列的答案加起来，记为 $f_i$，那么 $ans=\\sum_{i=1}^{n} a_i \\times f_i$，组合求 $f_i$ 即可。\n\n### 19.ARC123D Inc, Dec - Decomposition *2100\n\n简单题啊，居然有自己能很快做出来的题，尝试构造 $b,c$，这是简单的，感性理解一下，然后三分一下偏差值就是答案了。\n\n三分可以理解正确性，但是为什么想我那样构造就是答案了呢，其他的构造方法对吗？感觉很奇怪啊。\n\n### 20.CF1270H Number of Components *3300\n\n先发现一个性质：如果 $l$ 和 $r$ 在一个联通块内，那么 $[l , r]$ 就都在一个联通块内，证明是容易的。\n\n发现了这个性质之后，我们只需要求 $i$ 和 $i + 1$ 是否在一个联通块内。具体的判断方式是 $\\min_{j=1} ^{i} a_j \\ge max_{j=i+1}^{n} a_j$。记 $w=max_{j=i+1}^{n} a_j$，把数组内大于 $w$ 的设为 $1$，否则设为 $0$。如果 $i$ 和 $i + 1$ 不在同一联通块内那么二进制序列会长成 $11...100...0$ 这个样子，对于每个w维护一下10段的个数即可。\n\n### 21.CF1548E Gregor and the Two Painters *3400\n\n可以说是一种套路题吧，数网格联通块通用方法就是选个主元，去数有多少个主元，转化成求解偏序问题即可。\n\n注意主元和联通块要有双射关系，不然就假了。这个方法也可以做 SCCPC2024 A 虽然那个题有更简单的方法。\n\n### 22.CF1656G Cycle Palindrome *3200\n\n先考虑构造一组满足回文的排列，再考虑交换相同值的位置使得在同一个环中。\n\n然后再四个四个地换，判一下就行。正确性证明是困难的，不证了。\n\n### 23.ARC156D Xor Sum 5 *2600\n记一个牛逼结论：**若组合数 $\\binom{n}{m}$ 是奇数，那么在二进制下，m是n的子集**\n\n推论：**$\\binom{n}{c1,c2,c3…ck}$为奇数，那么c是n的某一子集的一组二进制划分**\n\n我们就记 $c_i$ 表示第 $i$ 个数的出现次数，当他的sum有贡献时，他就是上文的推论。\n\n所以发现最多40个 $c_i$ 是非零的，于是乎就可以DP了。\n\n### 24.ABC271G Access Counter * 2300\n\n很难不想到矩阵快速幂，但是问题在于我怎么构造矩阵，这是本题的难点。\n\n首先是容易设计出基本DP的， $dp_{i,j}=\\sum_{k=1}^{24}dp_{i-1,k}\\times calc(k,j)$\n\ncalc通过一些基本数列手段可以是可以处理出来的，然后挂到矩阵这题也就结束了。\n\n### 25.CF1042E Vasya and Magic Matrix *2300\n\n朴素的期望DP，好像期望DP都是倒着的，大概就是从终状态转移到始状态的意思。\n\n矩阵的壳是个幌子，根本无需在意，把每个东西单拎出来按权排序后DP即可。\n\n### 26.CF1552E Colors and Intervals *2300\n\n牛的构造题，先观察到每次选的两个点之间一定没有和它们同色的点，不然一定不优。\n\n每个东西被覆盖的次数限制很奇怪，考虑它的意义是什么。看见分母的 $k-1$ 不难联想到同一颜色的段数，那么考虑按段的编号分类，每个段就选限制个颜色即可。\n\n### 27.CF1635F Closest Pair *2800\n\n结论题，设 $L_i$ 表示 $i$ 左边第一个 $w$ 小于等于 i的点，$R_i$ 同理。\n\n那么答案就在 $[L_i,i],[i,R_i]$ 中。转化为二维数点问题即可。\n\n### 28.CF1868C Travel Plan *2400\n\n式子题，考虑对于满二叉树怎么做，会了这个就把原数拆成 $logn$ 个满二叉树即可。\n\n具体的，枚举最大值，记 $ans_i$ 表示最大值 $\\le i$ 的答案，那么最后答案就是 $\\sum_{i=1}^{m}i\\times (ans_i - ans_{i-1})$\n\n对于具体的转移不多赘述，主要就是记两个东西，一个表示这个子树所有东西到根的答案和子树内所以东西的填法的和。\n\n### 29.CF599E Sandy and Nuts *2600\n\n困难的，状态想错了导致举步维艰，想到状态之后这题并不困难，主要是处理限制的时候要稍微注意一下细节。状态是 $dp_{i,S}$ 表示以 $i$ 为根的子树内的点集为 $S$ 的合法方案数。方程就是 $dp_{i,S}=\\sum_{T\\in S} dp_{u,T}\\times dp_{i , S\\oplus T}$。使用钦定技巧避免算重。\n\n### 30.CF623D Birthday *2700\n\n难点解析：揣测出题人。\n\n为啥不让你求模意义下的答案，精度误差为啥允许开这么大，样例解释为啥没有计算过程？有没有种可能，真实值根本算不出来？\n\n想到这里这题大概也就迎刃而解了，计算k轮猜到答案的概率。直接做不好做，考虑容斥进行计算。具体的，计算在最多 $k$ 轮的时候结束的概率。要是知道每个人被猜到几次的话就很容易算概率了。列出式子，每一步贪心即可。收敛速度较快，计算 $3e5$ 次即可通过此题。\n\n### 31.CF407D Largest Submatrix 3 *2700\n\n不难想到 $O(n^4)$ 暴力，枚举行的上下界，对列跑双指针。这个算法难以优化，更换枚举次序。枚举左右界再枚举下边界，类似于区间DP得去转移答案。（子矩阵背景的题目从来没有自己做出来过，呜呜呜）\n\n### 32.CF1844G Tree Weight *3000\n\n牛逼题目，这辈子没见过这么秀的。\n\n首先容易把 $d_i$ 拆成 $dep_i + dep_{i + 1} - 2 \\times dep_{lca(i,i+1)}$\n\n然后就会发现这个东西非常不优美，要是能够拆出来的东西少带点变量就好了，因为 $dep_1$ 我们是知道的，他就是0。少带点变量就会使得这个式子可以递推了！**注意到lca前面有个系数2，对等式两边取个2的模这个东西就没了！** 然后我们就可以考虑按二进制位进行递推了。具体的，设 $ans_{i,j}\\equiv dep_{i} \\mod 2^j$。 那么有 $ans_{i,j}={(d(i-1,i)-ans_{i-1,j}+2\\times ans_{lca(i-1,i),j-1})} \\mod 2^j$最后判一下-1即可。注意力惊人的人可以独立做出来，可惜我不是。\n\n### 33.CF1762D GCD Queries *2100\n\n似乎是比较容易的。其实无非就是就是让你每两次操作排除一个非零的数。按顺序遍历配合上指针优化再加上简单的分讨即可。\n\n### 34.CF1406E Deleting Numbers *2600\n\n非常厉害的交互！有点人类智慧的感觉。\n\n首先是容易想到一个每个质数操作两次在log一下的方法，算算发现操作次数会超。\n\n考虑优化。显然对于上述做法而言，质数这个点是不会变的，那能不能让没啥用每个质数只操作1次呢。\n\n可以的，我们依次对每个质数操作B，然后计算出理论答案，要是不一样的话我们就check一下它的幂次。\n\n可是这样对于最小的质数而言，我们就没法求了。所以每过根号次操作就做一遍 A 1。要是有出入就把块内所有东西都判一遍即可。\n\n### 35.CF1033E Hidden Bipartite Graph *2800\n\n也是非常厉害的交互！更加的人类智慧！\n\n积累一种不一样的判二分图的trick：图中抽一棵生成树，看一下奇数层的点之间有没有连边，偶数层之间有没有连边。\n\n对于这个题而言我们可以先用 $2nlogn$ 次询问分治的去问出一棵生成树来。然后我们再在奇偶层之间随机分治看看有没连边。很巧妙的是这个随机分治，每次把点集大小除以二而且每一层期望操作次数只有两次，非常聪明啊！\n\n### 36.CF1863G Swaps *2800\n\n套路题？容易想到 $a_i$ 向 $i$ 连条边。然后观察一次操作带来的影响，发现一次操作带来一个自环。同时可以构建出一个双射：能生成的序列可以这样构成：如果 $i$ 的入边被操作过，那么这个位置就是 $i$，否则就是一条未被标记的出边指向的点权，这是容易计数的，注意在联通块为环时特殊处理一下即可。\n\n### 37.JOISC2015 F 合鍵\n\n非常好题目，让我认识到自己的不足：对于奇怪的模型就失去了分析的能力。\n\n**容易想到** 把 $l,r$ 拆开一起排序，分讨每一段的贡献情况，然后DP统计贡献即可。\n\n### 38.ABC373G No Cross Matching *2400\n\n场上的时候有种流子的感觉，但是不会建模。现在会了神秘贪心。\n\n非常厉害的转化，相交线段可以通过交换变得不相交，这会使得总距离变短，那么我们是需要让总距离最短即可，按照冒泡排序模拟即可。\n\n### 39.Yahoo Programming Contest 2019 Odd Subrectangles *2600\n\n容易想到转化为异或为1。考虑现在已经选出了一些行，那些列符合答案，记第 $i$ 列的异或和为 $c_i$ ，只要有一个 $c_i$ 等于1，那么这就意味着方案数是 $2^{m-1}$，其他列情况任选，用这一列来调整即可。那么现在思考怎么选行能够使得至少有一个1，把每行当成一个二进制数，这个问题就转化成了怎么选使异或和部位0，为0是简单的，记 $x$ 表示线性基的大小，然后异或和为0的方案数就是 $2^{n - x}$，证明原理和刚才一样。\n\n### 40.CF513D Constrained Tree *2600\n\n自己的思路是转化成偏序问题后瞎构造，不会证明正确性，也没有实践，来记个题解做法。\n\n大概就是去dfs，dfs(u) 表示 $u$ 是一个叶子时的可行性，然后简单判断几下递归下去是简单的。\n\n### 41.CF1699E Three Days Grace *2600\n\n这题DP？我咋想到？分析整个删数的过程，容易发现就是分解而已。想到去枚举一个最小值，让最大值最小，考虑 $dp_{i,j}$ 表示分解出来最小的数比 $i$ 大，最大的数最小是多少，发现转移是调和级数级别的，双指针找答案即可。\n\n### 42.CF547D Mike and Fish *2600\n\n这种染色问题再配上这个网格图背景，很难不让人想到二分图染色。考虑怎么进行染色，有一种很简单的方法是相同横或纵坐标的点两两配对，要是剩一个就不管了，不难证明这是正确的。\n\n### 43.CF1253F Cheap Robot *2500\n\n感觉是困难的。遇到这种图上多询问的问题就先不要往什么LCT这种东西方面去思考，实在不行再试试，然后考虑对于单个询问怎么做，要求的答案根据什么量推出来，把图上有用的东西再留下来，看看在树上怎么做。这题就这样的，看两个相邻的充电站想要抵达对 $c$ 的限制是什么，化成一个关于c的不等式，然后放在重构树上询问就可以了。\n\n### 44.CF53E Dead Ends *2500\n\n似乎是简单的，反正我秒了。看见数据范围这样的小，看来是DP状态需要两个状压维，那DP状态就出来了, $dp_{S,T}$ 表示形成的生成树是 $S$ 集合，度为一的点是 $T$ 集合，发现要算重，再回头看看转移方程，是不是方案算了 $popcount(T)$ 次呢？所以除一下就好了。\n","slug":"0002","published":1,"updated":"2024-10-13T10:39:03.226Z","comments":1,"layout":"post","photos":[],"_id":"cm27gdyu80003p59l7e31a81m","content":"<p>同步于<a href=\"https://www.luogu.com.cn/article/fcbug12f\">洛谷专栏</a></p>\n<p>马上也快退役了，干点自己想干的事吧，别太功利了。 </p>\n<p>早就想开这个记录了，碍于之前学校各种各样的题单让我没时间做（其实时间是颓没的）。</p>\n<p>现在感觉做啥都也无所谓了，开始记录吧！</p>\n<p>本博客就简单记录一下，就记个大体思路。</p>\n<h3 id=\"1-CF1773G-Game-of-Questions-2800\"><a href=\"#1-CF1773G-Game-of-Questions-2800\" class=\"headerlink\" title=\"1.CF1773G Game of Questions *2800\"></a>1.CF1773G Game of Questions *2800</h3><p>很神的状压DP啊，发现人数不多遂想到状压一下人数，设 $dp_S$ 表示场上只剩状态为 $S$ 的人，然后Genie赢的概率。</p>\n<p>难点在于转移，我们并不知道有哪些问题之前被问过，但是状压问题的话就太夸张了。注意到一个性质，一个问题问几遍都和问一遍等价。这个性质看上去很显然，但却是转移的关键所在。设 $w_{S,T}$ 表示从能让状态 $S$ 变成状态 $T$ 的问题个数。预处理出 $w$ 再DP即可。</p>\n<h3 id=\"2-CF1775F-Laboratory-on-Pluto-2500\"><a href=\"#2-CF1775F-Laboratory-on-Pluto-2500\" class=\"headerlink\" title=\"2.CF1775F Laboratory on Pluto *2500\"></a>2.CF1775F Laboratory on Pluto *2500</h3><p>牛的数学题，感觉真不错。第一问是简单的，一边取成 $\\sqrt{n}$ 就是最小值。虽然我不是很会证，但你要枚举根号做好像也能过。</p>\n<p>主要是这个第二问的数数就比较困难，考虑连通块的形式，就是一个矩形四缺口这种感觉，但是缺口一定是阶梯状的，就意味着求的是拆分数，可以dp求解。求完了一个角上的方案数就背包一下就行了。这题牛就牛在单步似乎都很好想，合在一起就有点困难了，但也其实还好，我自己做的时候就是拆分数那里有点不会，可以看看 P1025 srf的那篇DP题解，学一下k部拆分数的DP求法，感觉挺妙的。</p>\n<h3 id=\"3-AGC045A-Xor-Battle-2000\"><a href=\"#3-AGC045A-Xor-Battle-2000\" class=\"headerlink\" title=\"3.AGC045A Xor Battle *2000\"></a>3.AGC045A Xor Battle *2000</h3><p>很有趣的一道博弈论题目。还好开了题解，不然死都不会做。考虑从后往前枚举，设集合 $S_i$ 表示从 $i$ 开始走，有哪些数能使0赢。考虑使用线性基进行转移即可。</p>\n<h3 id=\"4-AGC043D-Merge-Triplets-2700\"><a href=\"#4-AGC043D-Merge-Triplets-2700\" class=\"headerlink\" title=\"4.AGC043D Merge Triplets *2700\"></a>4.AGC043D Merge Triplets *2700</h3><p>非常秀的DP题，考虑答案的形状。答案排列按下降段划分每一段都不会超过二，而且长为1的段一定比2的多。</p>\n<p>此乃本题第一秀。于是我们设计出状态 $dp_{i,j}$ 表示填到了第 $i$ 个位置长为1的段比长为2的段多了 $j$ 个的方案数。</p>\n<p>考虑转移，观察排列，按照偏序关系建出一棵外向树，用数拓扑序的方式进行DP，此乃二秀。</p>\n<h3 id=\"5-ARC093E-Bichrome-Spanning-Tree-2500\"><a href=\"#5-ARC093E-Bichrome-Spanning-Tree-2500\" class=\"headerlink\" title=\"5.ARC093E Bichrome Spanning Tree *2500\"></a>5.ARC093E Bichrome Spanning Tree *2500</h3><p>非常牛的数数题。考虑原图的最小生成树，如果mst都比 $x$ 大，那肯定是没有方案的。 如果mst和 $x$ 一样大。那就意味着能够成mst的边必有异色，这个是好数的。另外一种困难些，考虑钦定一条边在权为 $x$ 的生成树中，那他这棵生成树是包含它的最小生成树，必定与一棵原图的最小生成树有交，构成最小生成树的边一定同色，这样数数就方便了许多。</p>\n<h3 id=\"6-ABC279G-At-Most-2-Colors-2400\"><a href=\"#6-ABC279G-At-Most-2-Colors-2400\" class=\"headerlink\" title=\"6.ABC279G At Most 2 Colors *2400\"></a>6.ABC279G At Most 2 Colors *2400</h3><p>牛的DP题，考虑状态设计，设 $dp_{i , 1/2}$ 表示填到 $i$ 这个位置时，最后 $k-1$ 个位置有几种不同颜色，$k-1$ 这个地方设计的有点巧妙，我也是这个地方想不到。如果光设计个 $k$,那么 $i - k$ 这个位置填啥又跟 $i$ 这个位置填啥没关系，会影响转移，换成 $k-1$ 就不会了。关键是求答案时答案对吗？看看自己的方程，是不是同时保证了后k个也只有两个颜色了呢。</p>\n<h3 id=\"7-CF1385G-Columns-Swaps-2300\"><a href=\"#7-CF1385G-Columns-Swaps-2300\" class=\"headerlink\" title=\"7.CF1385G Columns Swaps *2300\"></a>7.CF1385G Columns Swaps *2300</h3><p>2-sat 板子，无需多言</p>\n<h3 id=\"8-ABC281G-Farthest-City-2300\"><a href=\"#8-ABC281G-Farthest-City-2300\" class=\"headerlink\" title=\"8.ABC281G Farthest City *2300\"></a>8.ABC281G Farthest City *2300</h3><p>看你想不想的到BFS树结构，想到了就是一道简单DP。</p>\n<h3 id=\"9-CF1657E-Star-MST-2200\"><a href=\"#9-CF1657E-Star-MST-2200\" class=\"headerlink\" title=\"9.CF1657E Star MST *2200\"></a>9.CF1657E Star MST *2200</h3><p>找到边权之间的偏序关系，有一个跟上一题类似的DP。</p>\n<h3 id=\"10-ARC103F-Distance-Sums-2800\"><a href=\"#10-ARC103F-Distance-Sums-2800\" class=\"headerlink\" title=\"10.ARC103F Distance Sums *2800\"></a>10.ARC103F Distance Sums *2800</h3><p>妙妙构造题，非常的神奇。一看一个没思路。观察一下，发现d值最大的一定是某个叶子，d值最小的一定是重心。</p>\n<p>然后就考虑从叶子开始向上构造推测父亲是谁（钦定重心为根）。类似换根DP去转移然后二分推出父亲即可。</p>\n<h3 id=\"11-ARC006D-Median-Pyramid-Hard-3000\"><a href=\"#11-ARC006D-Median-Pyramid-Hard-3000\" class=\"headerlink\" title=\"11.ARC006D Median Pyramid Hard * 3000\"></a>11.ARC006D Median Pyramid Hard * 3000</h3><p>人才题。考虑二分？为什么要考虑这个？或许是因为中位数题好多都要二分。二分什么？二分答案。我们将大于二分出来的东西的数都看作是1其他看作是0，那么只需要关注顶部数的01情况，而这取决于最靠近中间的相同数对是0还是1，于是做完了。</p>\n<h3 id=\"12-CF1659E-AND-MEX-Walk-2200\"><a href=\"#12-CF1659E-AND-MEX-Walk-2200\" class=\"headerlink\" title=\"12.CF1659E AND-MEX Walk *2200\"></a>12.CF1659E AND-MEX Walk *2200</h3><p>考虑答案的范围，容易发现答案只有可能是0,1,2，分别使用并查集判断一下即可。</p>\n<h3 id=\"13-CF1473E-Minimum-Path-2400\"><a href=\"#13-CF1473E-Minimum-Path-2400\" class=\"headerlink\" title=\"13.CF1473E Minimum Path *2400\"></a>13.CF1473E Minimum Path *2400</h3><p>模拟赛原题，有点牛的。要求的式子很有最短路的感觉，式子的本质是抽出一条最长的换上一条最短的。</p>\n<p>OK，比较美妙的一步来了。要想用最短路去求解，那么必须把后面那一坨塞进 $\\sum$ 里面去。</p>\n<p>刚刚想了式子的本质，现在扩展一下，任选两条边，用一条去换另一条的最小值，此时茅塞顿开，这个问题就可以用分层图最短路进行求解了。</p>\n<h3 id=\"14-ARC127E-Priority-Queue-2700\"><a href=\"#14-ARC127E-Priority-Queue-2700\" class=\"headerlink\" title=\"14.ARC127E Priority Queue *2700\"></a>14.ARC127E Priority Queue *2700</h3><p>比较感性的一个题。正难则反，考虑计算被删除的集合的方案数，容易发现每个删除位置都有取值范围，而且还有一个奇奇怪怪的性质，每一次删的数都可以是离该次删除最接近的1，这样不会影响方案数，交换法不难证明。此时上文的取值范围也可以用类似于括号配对的方法求出来。既然集合计数那我就钦定一下数列是单调递增的，同时发现如果单增数列能取到，单增数列的排列也能取，反之同理，于是乎DP即可。</p>\n<p>感性就感性在每个性质看上去好像很显然证起来还是有一些困难的。</p>\n<h3 id=\"15-ARC180D-Division-into-3-2700\"><a href=\"#15-ARC180D-Division-into-3-2700\" class=\"headerlink\" title=\"15.ARC180D Division into 3 *2700\"></a>15.ARC180D Division into 3 *2700</h3><p>放在任务里面吃灰的，今天终于给他做了。算是一种套路题吧？观察到区间最大值一定会被取到，分类讨论一下在哪个段。</p>\n<p>在A/C段中就用扫描线算答案，在B中就只让AC取左右端点各一个，这题也就完了。感觉还是很神奇，从一个显然的性质推导出来整个做法</p>\n<h3 id=\"16-CF335F-Buy-One-Get-One-Free-3000\"><a href=\"#16-CF335F-Buy-One-Get-One-Free-3000\" class=\"headerlink\" title=\"16.CF335F Buy One, Get One Free *3000\"></a>16.CF335F Buy One, Get One Free *3000</h3><p>反悔贪心神仙题，反悔策略怎么想出来的，大概率是用归纳法。显然是把序列从大到小排个序，同样代价的物品就分为一组，按组进行考虑。维护一个小根堆记录当前白嫖的东西的价值，每次先算出当前这一轮一开始就可以白嫖多少个，先不忙压入小根堆避免造成影响。剩下的东西就考虑是买好还是不买好，按反悔贪心策略执行即可（不想细说了，毕竟不是题解）。</p>\n<h3 id=\"17-CF516D-Drazil-and-Morning-Exercise-2800\"><a href=\"#17-CF516D-Drazil-and-Morning-Exercise-2800\" class=\"headerlink\" title=\"17.CF516D Drazil and Morning Exercise *2800\"></a>17.CF516D Drazil and Morning Exercise *2800</h3><p>询问次数只有50，考虑使用大于 O(n) 复杂度的东西执行单次询问。</p>\n<p>思考怎么样才能使联通块的计算更加方便，钦定一个根，枚举联通块的根。</p>\n<p>然后呢，要是联通块的 max，min 的差值求起来方便就更好了。</p>\n<p>不妨让他随层数单调，如何实现，以f最小的点为根即可，每次询问树上差分。</p>\n<h3 id=\"18-ARC167C-MST-on-Line-2400\"><a href=\"#18-ARC167C-MST-on-Line-2400\" class=\"headerlink\" title=\"18.ARC167C MST on Line++ *2400\"></a>18.ARC167C MST on Line++ *2400</h3><p>考虑数每个 $a_i$ 在 MST 中的出现次数。容易发现 $a_i$ 的顺序与答案没啥关系。接下来的一步比较神秘，考虑一个子问题，如果只能选小于等于 $a_i$ 的边，最多能选多少条，把每个排列的答案加起来，记为 $f_i$，那么 $ans=\\sum_{i=1}^{n} a_i \\times f_i$，组合求 $f_i$ 即可。</p>\n<h3 id=\"19-ARC123D-Inc-Dec-Decomposition-2100\"><a href=\"#19-ARC123D-Inc-Dec-Decomposition-2100\" class=\"headerlink\" title=\"19.ARC123D Inc, Dec - Decomposition *2100\"></a>19.ARC123D Inc, Dec - Decomposition *2100</h3><p>简单题啊，居然有自己能很快做出来的题，尝试构造 $b,c$，这是简单的，感性理解一下，然后三分一下偏差值就是答案了。</p>\n<p>三分可以理解正确性，但是为什么想我那样构造就是答案了呢，其他的构造方法对吗？感觉很奇怪啊。</p>\n<h3 id=\"20-CF1270H-Number-of-Components-3300\"><a href=\"#20-CF1270H-Number-of-Components-3300\" class=\"headerlink\" title=\"20.CF1270H Number of Components *3300\"></a>20.CF1270H Number of Components *3300</h3><p>先发现一个性质：如果 $l$ 和 $r$ 在一个联通块内，那么 $[l , r]$ 就都在一个联通块内，证明是容易的。</p>\n<p>发现了这个性质之后，我们只需要求 $i$ 和 $i + 1$ 是否在一个联通块内。具体的判断方式是 $\\min_{j=1} ^{i} a_j \\ge max_{j=i+1}^{n} a_j$。记 $w=max_{j=i+1}^{n} a_j$，把数组内大于 $w$ 的设为 $1$，否则设为 $0$。如果 $i$ 和 $i + 1$ 不在同一联通块内那么二进制序列会长成 $11…100…0$ 这个样子，对于每个w维护一下10段的个数即可。</p>\n<h3 id=\"21-CF1548E-Gregor-and-the-Two-Painters-3400\"><a href=\"#21-CF1548E-Gregor-and-the-Two-Painters-3400\" class=\"headerlink\" title=\"21.CF1548E Gregor and the Two Painters *3400\"></a>21.CF1548E Gregor and the Two Painters *3400</h3><p>可以说是一种套路题吧，数网格联通块通用方法就是选个主元，去数有多少个主元，转化成求解偏序问题即可。</p>\n<p>注意主元和联通块要有双射关系，不然就假了。这个方法也可以做 SCCPC2024 A 虽然那个题有更简单的方法。</p>\n<h3 id=\"22-CF1656G-Cycle-Palindrome-3200\"><a href=\"#22-CF1656G-Cycle-Palindrome-3200\" class=\"headerlink\" title=\"22.CF1656G Cycle Palindrome *3200\"></a>22.CF1656G Cycle Palindrome *3200</h3><p>先考虑构造一组满足回文的排列，再考虑交换相同值的位置使得在同一个环中。</p>\n<p>然后再四个四个地换，判一下就行。正确性证明是困难的，不证了。</p>\n<h3 id=\"23-ARC156D-Xor-Sum-5-2600\"><a href=\"#23-ARC156D-Xor-Sum-5-2600\" class=\"headerlink\" title=\"23.ARC156D Xor Sum 5 *2600\"></a>23.ARC156D Xor Sum 5 *2600</h3><p>记一个牛逼结论：<strong>若组合数 $\\binom{n}{m}$ 是奇数，那么在二进制下，m是n的子集</strong></p>\n<p>推论：<strong>$\\binom{n}{c1,c2,c3…ck}$为奇数，那么c是n的某一子集的一组二进制划分</strong></p>\n<p>我们就记 $c_i$ 表示第 $i$ 个数的出现次数，当他的sum有贡献时，他就是上文的推论。</p>\n<p>所以发现最多40个 $c_i$ 是非零的，于是乎就可以DP了。</p>\n<h3 id=\"24-ABC271G-Access-Counter-2300\"><a href=\"#24-ABC271G-Access-Counter-2300\" class=\"headerlink\" title=\"24.ABC271G Access Counter * 2300\"></a>24.ABC271G Access Counter * 2300</h3><p>很难不想到矩阵快速幂，但是问题在于我怎么构造矩阵，这是本题的难点。</p>\n<p>首先是容易设计出基本DP的， $dp_{i,j}=\\sum_{k=1}^{24}dp_{i-1,k}\\times calc(k,j)$</p>\n<p>calc通过一些基本数列手段可以是可以处理出来的，然后挂到矩阵这题也就结束了。</p>\n<h3 id=\"25-CF1042E-Vasya-and-Magic-Matrix-2300\"><a href=\"#25-CF1042E-Vasya-and-Magic-Matrix-2300\" class=\"headerlink\" title=\"25.CF1042E Vasya and Magic Matrix *2300\"></a>25.CF1042E Vasya and Magic Matrix *2300</h3><p>朴素的期望DP，好像期望DP都是倒着的，大概就是从终状态转移到始状态的意思。</p>\n<p>矩阵的壳是个幌子，根本无需在意，把每个东西单拎出来按权排序后DP即可。</p>\n<h3 id=\"26-CF1552E-Colors-and-Intervals-2300\"><a href=\"#26-CF1552E-Colors-and-Intervals-2300\" class=\"headerlink\" title=\"26.CF1552E Colors and Intervals *2300\"></a>26.CF1552E Colors and Intervals *2300</h3><p>牛的构造题，先观察到每次选的两个点之间一定没有和它们同色的点，不然一定不优。</p>\n<p>每个东西被覆盖的次数限制很奇怪，考虑它的意义是什么。看见分母的 $k-1$ 不难联想到同一颜色的段数，那么考虑按段的编号分类，每个段就选限制个颜色即可。</p>\n<h3 id=\"27-CF1635F-Closest-Pair-2800\"><a href=\"#27-CF1635F-Closest-Pair-2800\" class=\"headerlink\" title=\"27.CF1635F Closest Pair *2800\"></a>27.CF1635F Closest Pair *2800</h3><p>结论题，设 $L_i$ 表示 $i$ 左边第一个 $w$ 小于等于 i的点，$R_i$ 同理。</p>\n<p>那么答案就在 $[L_i,i],[i,R_i]$ 中。转化为二维数点问题即可。</p>\n<h3 id=\"28-CF1868C-Travel-Plan-2400\"><a href=\"#28-CF1868C-Travel-Plan-2400\" class=\"headerlink\" title=\"28.CF1868C Travel Plan *2400\"></a>28.CF1868C Travel Plan *2400</h3><p>式子题，考虑对于满二叉树怎么做，会了这个就把原数拆成 $logn$ 个满二叉树即可。</p>\n<p>具体的，枚举最大值，记 $ans_i$ 表示最大值 $\\le i$ 的答案，那么最后答案就是 $\\sum_{i=1}^{m}i\\times (ans_i - ans_{i-1})$</p>\n<p>对于具体的转移不多赘述，主要就是记两个东西，一个表示这个子树所有东西到根的答案和子树内所以东西的填法的和。</p>\n<h3 id=\"29-CF599E-Sandy-and-Nuts-2600\"><a href=\"#29-CF599E-Sandy-and-Nuts-2600\" class=\"headerlink\" title=\"29.CF599E Sandy and Nuts *2600\"></a>29.CF599E Sandy and Nuts *2600</h3><p>困难的，状态想错了导致举步维艰，想到状态之后这题并不困难，主要是处理限制的时候要稍微注意一下细节。状态是 $dp_{i,S}$ 表示以 $i$ 为根的子树内的点集为 $S$ 的合法方案数。方程就是 $dp_{i,S}=\\sum_{T\\in S} dp_{u,T}\\times dp_{i , S\\oplus T}$。使用钦定技巧避免算重。</p>\n<h3 id=\"30-CF623D-Birthday-2700\"><a href=\"#30-CF623D-Birthday-2700\" class=\"headerlink\" title=\"30.CF623D Birthday *2700\"></a>30.CF623D Birthday *2700</h3><p>难点解析：揣测出题人。</p>\n<p>为啥不让你求模意义下的答案，精度误差为啥允许开这么大，样例解释为啥没有计算过程？有没有种可能，真实值根本算不出来？</p>\n<p>想到这里这题大概也就迎刃而解了，计算k轮猜到答案的概率。直接做不好做，考虑容斥进行计算。具体的，计算在最多 $k$ 轮的时候结束的概率。要是知道每个人被猜到几次的话就很容易算概率了。列出式子，每一步贪心即可。收敛速度较快，计算 $3e5$ 次即可通过此题。</p>\n<h3 id=\"31-CF407D-Largest-Submatrix-3-2700\"><a href=\"#31-CF407D-Largest-Submatrix-3-2700\" class=\"headerlink\" title=\"31.CF407D Largest Submatrix 3 *2700\"></a>31.CF407D Largest Submatrix 3 *2700</h3><p>不难想到 $O(n^4)$ 暴力，枚举行的上下界，对列跑双指针。这个算法难以优化，更换枚举次序。枚举左右界再枚举下边界，类似于区间DP得去转移答案。（子矩阵背景的题目从来没有自己做出来过，呜呜呜）</p>\n<h3 id=\"32-CF1844G-Tree-Weight-3000\"><a href=\"#32-CF1844G-Tree-Weight-3000\" class=\"headerlink\" title=\"32.CF1844G Tree Weight *3000\"></a>32.CF1844G Tree Weight *3000</h3><p>牛逼题目，这辈子没见过这么秀的。</p>\n<p>首先容易把 $d_i$ 拆成 $dep_i + dep_{i + 1} - 2 \\times dep_{lca(i,i+1)}$</p>\n<p>然后就会发现这个东西非常不优美，要是能够拆出来的东西少带点变量就好了，因为 $dep_1$ 我们是知道的，他就是0。少带点变量就会使得这个式子可以递推了！<strong>注意到lca前面有个系数2，对等式两边取个2的模这个东西就没了！</strong> 然后我们就可以考虑按二进制位进行递推了。具体的，设 $ans_{i,j}\\equiv dep_{i} \\mod 2^j$。 那么有 $ans_{i,j}={(d(i-1,i)-ans_{i-1,j}+2\\times ans_{lca(i-1,i),j-1})} \\mod 2^j$最后判一下-1即可。注意力惊人的人可以独立做出来，可惜我不是。</p>\n<h3 id=\"33-CF1762D-GCD-Queries-2100\"><a href=\"#33-CF1762D-GCD-Queries-2100\" class=\"headerlink\" title=\"33.CF1762D GCD Queries *2100\"></a>33.CF1762D GCD Queries *2100</h3><p>似乎是比较容易的。其实无非就是就是让你每两次操作排除一个非零的数。按顺序遍历配合上指针优化再加上简单的分讨即可。</p>\n<h3 id=\"34-CF1406E-Deleting-Numbers-2600\"><a href=\"#34-CF1406E-Deleting-Numbers-2600\" class=\"headerlink\" title=\"34.CF1406E Deleting Numbers *2600\"></a>34.CF1406E Deleting Numbers *2600</h3><p>非常厉害的交互！有点人类智慧的感觉。</p>\n<p>首先是容易想到一个每个质数操作两次在log一下的方法，算算发现操作次数会超。</p>\n<p>考虑优化。显然对于上述做法而言，质数这个点是不会变的，那能不能让没啥用每个质数只操作1次呢。</p>\n<p>可以的，我们依次对每个质数操作B，然后计算出理论答案，要是不一样的话我们就check一下它的幂次。</p>\n<p>可是这样对于最小的质数而言，我们就没法求了。所以每过根号次操作就做一遍 A 1。要是有出入就把块内所有东西都判一遍即可。</p>\n<h3 id=\"35-CF1033E-Hidden-Bipartite-Graph-2800\"><a href=\"#35-CF1033E-Hidden-Bipartite-Graph-2800\" class=\"headerlink\" title=\"35.CF1033E Hidden Bipartite Graph *2800\"></a>35.CF1033E Hidden Bipartite Graph *2800</h3><p>也是非常厉害的交互！更加的人类智慧！</p>\n<p>积累一种不一样的判二分图的trick：图中抽一棵生成树，看一下奇数层的点之间有没有连边，偶数层之间有没有连边。</p>\n<p>对于这个题而言我们可以先用 $2nlogn$ 次询问分治的去问出一棵生成树来。然后我们再在奇偶层之间随机分治看看有没连边。很巧妙的是这个随机分治，每次把点集大小除以二而且每一层期望操作次数只有两次，非常聪明啊！</p>\n<h3 id=\"36-CF1863G-Swaps-2800\"><a href=\"#36-CF1863G-Swaps-2800\" class=\"headerlink\" title=\"36.CF1863G Swaps *2800\"></a>36.CF1863G Swaps *2800</h3><p>套路题？容易想到 $a_i$ 向 $i$ 连条边。然后观察一次操作带来的影响，发现一次操作带来一个自环。同时可以构建出一个双射：能生成的序列可以这样构成：如果 $i$ 的入边被操作过，那么这个位置就是 $i$，否则就是一条未被标记的出边指向的点权，这是容易计数的，注意在联通块为环时特殊处理一下即可。</p>\n<h3 id=\"37-JOISC2015-F-合鍵\"><a href=\"#37-JOISC2015-F-合鍵\" class=\"headerlink\" title=\"37.JOISC2015 F 合鍵\"></a>37.JOISC2015 F 合鍵</h3><p>非常好题目，让我认识到自己的不足：对于奇怪的模型就失去了分析的能力。</p>\n<p><strong>容易想到</strong> 把 $l,r$ 拆开一起排序，分讨每一段的贡献情况，然后DP统计贡献即可。</p>\n<h3 id=\"38-ABC373G-No-Cross-Matching-2400\"><a href=\"#38-ABC373G-No-Cross-Matching-2400\" class=\"headerlink\" title=\"38.ABC373G No Cross Matching *2400\"></a>38.ABC373G No Cross Matching *2400</h3><p>场上的时候有种流子的感觉，但是不会建模。现在会了神秘贪心。</p>\n<p>非常厉害的转化，相交线段可以通过交换变得不相交，这会使得总距离变短，那么我们是需要让总距离最短即可，按照冒泡排序模拟即可。</p>\n<h3 id=\"39-Yahoo-Programming-Contest-2019-Odd-Subrectangles-2600\"><a href=\"#39-Yahoo-Programming-Contest-2019-Odd-Subrectangles-2600\" class=\"headerlink\" title=\"39.Yahoo Programming Contest 2019 Odd Subrectangles *2600\"></a>39.Yahoo Programming Contest 2019 Odd Subrectangles *2600</h3><p>容易想到转化为异或为1。考虑现在已经选出了一些行，那些列符合答案，记第 $i$ 列的异或和为 $c_i$ ，只要有一个 $c_i$ 等于1，那么这就意味着方案数是 $2^{m-1}$，其他列情况任选，用这一列来调整即可。那么现在思考怎么选行能够使得至少有一个1，把每行当成一个二进制数，这个问题就转化成了怎么选使异或和部位0，为0是简单的，记 $x$ 表示线性基的大小，然后异或和为0的方案数就是 $2^{n - x}$，证明原理和刚才一样。</p>\n<h3 id=\"40-CF513D-Constrained-Tree-2600\"><a href=\"#40-CF513D-Constrained-Tree-2600\" class=\"headerlink\" title=\"40.CF513D Constrained Tree *2600\"></a>40.CF513D Constrained Tree *2600</h3><p>自己的思路是转化成偏序问题后瞎构造，不会证明正确性，也没有实践，来记个题解做法。</p>\n<p>大概就是去dfs，dfs(u) 表示 $u$ 是一个叶子时的可行性，然后简单判断几下递归下去是简单的。</p>\n<h3 id=\"41-CF1699E-Three-Days-Grace-2600\"><a href=\"#41-CF1699E-Three-Days-Grace-2600\" class=\"headerlink\" title=\"41.CF1699E Three Days Grace *2600\"></a>41.CF1699E Three Days Grace *2600</h3><p>这题DP？我咋想到？分析整个删数的过程，容易发现就是分解而已。想到去枚举一个最小值，让最大值最小，考虑 $dp_{i,j}$ 表示分解出来最小的数比 $i$ 大，最大的数最小是多少，发现转移是调和级数级别的，双指针找答案即可。</p>\n<h3 id=\"42-CF547D-Mike-and-Fish-2600\"><a href=\"#42-CF547D-Mike-and-Fish-2600\" class=\"headerlink\" title=\"42.CF547D Mike and Fish *2600\"></a>42.CF547D Mike and Fish *2600</h3><p>这种染色问题再配上这个网格图背景，很难不让人想到二分图染色。考虑怎么进行染色，有一种很简单的方法是相同横或纵坐标的点两两配对，要是剩一个就不管了，不难证明这是正确的。</p>\n<h3 id=\"43-CF1253F-Cheap-Robot-2500\"><a href=\"#43-CF1253F-Cheap-Robot-2500\" class=\"headerlink\" title=\"43.CF1253F Cheap Robot *2500\"></a>43.CF1253F Cheap Robot *2500</h3><p>感觉是困难的。遇到这种图上多询问的问题就先不要往什么LCT这种东西方面去思考，实在不行再试试，然后考虑对于单个询问怎么做，要求的答案根据什么量推出来，把图上有用的东西再留下来，看看在树上怎么做。这题就这样的，看两个相邻的充电站想要抵达对 $c$ 的限制是什么，化成一个关于c的不等式，然后放在重构树上询问就可以了。</p>\n<h3 id=\"44-CF53E-Dead-Ends-2500\"><a href=\"#44-CF53E-Dead-Ends-2500\" class=\"headerlink\" title=\"44.CF53E Dead Ends *2500\"></a>44.CF53E Dead Ends *2500</h3><p>似乎是简单的，反正我秒了。看见数据范围这样的小，看来是DP状态需要两个状压维，那DP状态就出来了, $dp_{S,T}$ 表示形成的生成树是 $S$ 集合，度为一的点是 $T$ 集合，发现要算重，再回头看看转移方程，是不是方案算了 $popcount(T)$ 次呢？所以除一下就好了。</p>\n","excerpt":"","more":"<p>同步于<a href=\"https://www.luogu.com.cn/article/fcbug12f\">洛谷专栏</a></p>\n<p>马上也快退役了，干点自己想干的事吧，别太功利了。 </p>\n<p>早就想开这个记录了，碍于之前学校各种各样的题单让我没时间做（其实时间是颓没的）。</p>\n<p>现在感觉做啥都也无所谓了，开始记录吧！</p>\n<p>本博客就简单记录一下，就记个大体思路。</p>\n<h3 id=\"1-CF1773G-Game-of-Questions-2800\"><a href=\"#1-CF1773G-Game-of-Questions-2800\" class=\"headerlink\" title=\"1.CF1773G Game of Questions *2800\"></a>1.CF1773G Game of Questions *2800</h3><p>很神的状压DP啊，发现人数不多遂想到状压一下人数，设 $dp_S$ 表示场上只剩状态为 $S$ 的人，然后Genie赢的概率。</p>\n<p>难点在于转移，我们并不知道有哪些问题之前被问过，但是状压问题的话就太夸张了。注意到一个性质，一个问题问几遍都和问一遍等价。这个性质看上去很显然，但却是转移的关键所在。设 $w_{S,T}$ 表示从能让状态 $S$ 变成状态 $T$ 的问题个数。预处理出 $w$ 再DP即可。</p>\n<h3 id=\"2-CF1775F-Laboratory-on-Pluto-2500\"><a href=\"#2-CF1775F-Laboratory-on-Pluto-2500\" class=\"headerlink\" title=\"2.CF1775F Laboratory on Pluto *2500\"></a>2.CF1775F Laboratory on Pluto *2500</h3><p>牛的数学题，感觉真不错。第一问是简单的，一边取成 $\\sqrt{n}$ 就是最小值。虽然我不是很会证，但你要枚举根号做好像也能过。</p>\n<p>主要是这个第二问的数数就比较困难，考虑连通块的形式，就是一个矩形四缺口这种感觉，但是缺口一定是阶梯状的，就意味着求的是拆分数，可以dp求解。求完了一个角上的方案数就背包一下就行了。这题牛就牛在单步似乎都很好想，合在一起就有点困难了，但也其实还好，我自己做的时候就是拆分数那里有点不会，可以看看 P1025 srf的那篇DP题解，学一下k部拆分数的DP求法，感觉挺妙的。</p>\n<h3 id=\"3-AGC045A-Xor-Battle-2000\"><a href=\"#3-AGC045A-Xor-Battle-2000\" class=\"headerlink\" title=\"3.AGC045A Xor Battle *2000\"></a>3.AGC045A Xor Battle *2000</h3><p>很有趣的一道博弈论题目。还好开了题解，不然死都不会做。考虑从后往前枚举，设集合 $S_i$ 表示从 $i$ 开始走，有哪些数能使0赢。考虑使用线性基进行转移即可。</p>\n<h3 id=\"4-AGC043D-Merge-Triplets-2700\"><a href=\"#4-AGC043D-Merge-Triplets-2700\" class=\"headerlink\" title=\"4.AGC043D Merge Triplets *2700\"></a>4.AGC043D Merge Triplets *2700</h3><p>非常秀的DP题，考虑答案的形状。答案排列按下降段划分每一段都不会超过二，而且长为1的段一定比2的多。</p>\n<p>此乃本题第一秀。于是我们设计出状态 $dp_{i,j}$ 表示填到了第 $i$ 个位置长为1的段比长为2的段多了 $j$ 个的方案数。</p>\n<p>考虑转移，观察排列，按照偏序关系建出一棵外向树，用数拓扑序的方式进行DP，此乃二秀。</p>\n<h3 id=\"5-ARC093E-Bichrome-Spanning-Tree-2500\"><a href=\"#5-ARC093E-Bichrome-Spanning-Tree-2500\" class=\"headerlink\" title=\"5.ARC093E Bichrome Spanning Tree *2500\"></a>5.ARC093E Bichrome Spanning Tree *2500</h3><p>非常牛的数数题。考虑原图的最小生成树，如果mst都比 $x$ 大，那肯定是没有方案的。 如果mst和 $x$ 一样大。那就意味着能够成mst的边必有异色，这个是好数的。另外一种困难些，考虑钦定一条边在权为 $x$ 的生成树中，那他这棵生成树是包含它的最小生成树，必定与一棵原图的最小生成树有交，构成最小生成树的边一定同色，这样数数就方便了许多。</p>\n<h3 id=\"6-ABC279G-At-Most-2-Colors-2400\"><a href=\"#6-ABC279G-At-Most-2-Colors-2400\" class=\"headerlink\" title=\"6.ABC279G At Most 2 Colors *2400\"></a>6.ABC279G At Most 2 Colors *2400</h3><p>牛的DP题，考虑状态设计，设 $dp_{i , 1/2}$ 表示填到 $i$ 这个位置时，最后 $k-1$ 个位置有几种不同颜色，$k-1$ 这个地方设计的有点巧妙，我也是这个地方想不到。如果光设计个 $k$,那么 $i - k$ 这个位置填啥又跟 $i$ 这个位置填啥没关系，会影响转移，换成 $k-1$ 就不会了。关键是求答案时答案对吗？看看自己的方程，是不是同时保证了后k个也只有两个颜色了呢。</p>\n<h3 id=\"7-CF1385G-Columns-Swaps-2300\"><a href=\"#7-CF1385G-Columns-Swaps-2300\" class=\"headerlink\" title=\"7.CF1385G Columns Swaps *2300\"></a>7.CF1385G Columns Swaps *2300</h3><p>2-sat 板子，无需多言</p>\n<h3 id=\"8-ABC281G-Farthest-City-2300\"><a href=\"#8-ABC281G-Farthest-City-2300\" class=\"headerlink\" title=\"8.ABC281G Farthest City *2300\"></a>8.ABC281G Farthest City *2300</h3><p>看你想不想的到BFS树结构，想到了就是一道简单DP。</p>\n<h3 id=\"9-CF1657E-Star-MST-2200\"><a href=\"#9-CF1657E-Star-MST-2200\" class=\"headerlink\" title=\"9.CF1657E Star MST *2200\"></a>9.CF1657E Star MST *2200</h3><p>找到边权之间的偏序关系，有一个跟上一题类似的DP。</p>\n<h3 id=\"10-ARC103F-Distance-Sums-2800\"><a href=\"#10-ARC103F-Distance-Sums-2800\" class=\"headerlink\" title=\"10.ARC103F Distance Sums *2800\"></a>10.ARC103F Distance Sums *2800</h3><p>妙妙构造题，非常的神奇。一看一个没思路。观察一下，发现d值最大的一定是某个叶子，d值最小的一定是重心。</p>\n<p>然后就考虑从叶子开始向上构造推测父亲是谁（钦定重心为根）。类似换根DP去转移然后二分推出父亲即可。</p>\n<h3 id=\"11-ARC006D-Median-Pyramid-Hard-3000\"><a href=\"#11-ARC006D-Median-Pyramid-Hard-3000\" class=\"headerlink\" title=\"11.ARC006D Median Pyramid Hard * 3000\"></a>11.ARC006D Median Pyramid Hard * 3000</h3><p>人才题。考虑二分？为什么要考虑这个？或许是因为中位数题好多都要二分。二分什么？二分答案。我们将大于二分出来的东西的数都看作是1其他看作是0，那么只需要关注顶部数的01情况，而这取决于最靠近中间的相同数对是0还是1，于是做完了。</p>\n<h3 id=\"12-CF1659E-AND-MEX-Walk-2200\"><a href=\"#12-CF1659E-AND-MEX-Walk-2200\" class=\"headerlink\" title=\"12.CF1659E AND-MEX Walk *2200\"></a>12.CF1659E AND-MEX Walk *2200</h3><p>考虑答案的范围，容易发现答案只有可能是0,1,2，分别使用并查集判断一下即可。</p>\n<h3 id=\"13-CF1473E-Minimum-Path-2400\"><a href=\"#13-CF1473E-Minimum-Path-2400\" class=\"headerlink\" title=\"13.CF1473E Minimum Path *2400\"></a>13.CF1473E Minimum Path *2400</h3><p>模拟赛原题，有点牛的。要求的式子很有最短路的感觉，式子的本质是抽出一条最长的换上一条最短的。</p>\n<p>OK，比较美妙的一步来了。要想用最短路去求解，那么必须把后面那一坨塞进 $\\sum$ 里面去。</p>\n<p>刚刚想了式子的本质，现在扩展一下，任选两条边，用一条去换另一条的最小值，此时茅塞顿开，这个问题就可以用分层图最短路进行求解了。</p>\n<h3 id=\"14-ARC127E-Priority-Queue-2700\"><a href=\"#14-ARC127E-Priority-Queue-2700\" class=\"headerlink\" title=\"14.ARC127E Priority Queue *2700\"></a>14.ARC127E Priority Queue *2700</h3><p>比较感性的一个题。正难则反，考虑计算被删除的集合的方案数，容易发现每个删除位置都有取值范围，而且还有一个奇奇怪怪的性质，每一次删的数都可以是离该次删除最接近的1，这样不会影响方案数，交换法不难证明。此时上文的取值范围也可以用类似于括号配对的方法求出来。既然集合计数那我就钦定一下数列是单调递增的，同时发现如果单增数列能取到，单增数列的排列也能取，反之同理，于是乎DP即可。</p>\n<p>感性就感性在每个性质看上去好像很显然证起来还是有一些困难的。</p>\n<h3 id=\"15-ARC180D-Division-into-3-2700\"><a href=\"#15-ARC180D-Division-into-3-2700\" class=\"headerlink\" title=\"15.ARC180D Division into 3 *2700\"></a>15.ARC180D Division into 3 *2700</h3><p>放在任务里面吃灰的，今天终于给他做了。算是一种套路题吧？观察到区间最大值一定会被取到，分类讨论一下在哪个段。</p>\n<p>在A/C段中就用扫描线算答案，在B中就只让AC取左右端点各一个，这题也就完了。感觉还是很神奇，从一个显然的性质推导出来整个做法</p>\n<h3 id=\"16-CF335F-Buy-One-Get-One-Free-3000\"><a href=\"#16-CF335F-Buy-One-Get-One-Free-3000\" class=\"headerlink\" title=\"16.CF335F Buy One, Get One Free *3000\"></a>16.CF335F Buy One, Get One Free *3000</h3><p>反悔贪心神仙题，反悔策略怎么想出来的，大概率是用归纳法。显然是把序列从大到小排个序，同样代价的物品就分为一组，按组进行考虑。维护一个小根堆记录当前白嫖的东西的价值，每次先算出当前这一轮一开始就可以白嫖多少个，先不忙压入小根堆避免造成影响。剩下的东西就考虑是买好还是不买好，按反悔贪心策略执行即可（不想细说了，毕竟不是题解）。</p>\n<h3 id=\"17-CF516D-Drazil-and-Morning-Exercise-2800\"><a href=\"#17-CF516D-Drazil-and-Morning-Exercise-2800\" class=\"headerlink\" title=\"17.CF516D Drazil and Morning Exercise *2800\"></a>17.CF516D Drazil and Morning Exercise *2800</h3><p>询问次数只有50，考虑使用大于 O(n) 复杂度的东西执行单次询问。</p>\n<p>思考怎么样才能使联通块的计算更加方便，钦定一个根，枚举联通块的根。</p>\n<p>然后呢，要是联通块的 max，min 的差值求起来方便就更好了。</p>\n<p>不妨让他随层数单调，如何实现，以f最小的点为根即可，每次询问树上差分。</p>\n<h3 id=\"18-ARC167C-MST-on-Line-2400\"><a href=\"#18-ARC167C-MST-on-Line-2400\" class=\"headerlink\" title=\"18.ARC167C MST on Line++ *2400\"></a>18.ARC167C MST on Line++ *2400</h3><p>考虑数每个 $a_i$ 在 MST 中的出现次数。容易发现 $a_i$ 的顺序与答案没啥关系。接下来的一步比较神秘，考虑一个子问题，如果只能选小于等于 $a_i$ 的边，最多能选多少条，把每个排列的答案加起来，记为 $f_i$，那么 $ans=\\sum_{i=1}^{n} a_i \\times f_i$，组合求 $f_i$ 即可。</p>\n<h3 id=\"19-ARC123D-Inc-Dec-Decomposition-2100\"><a href=\"#19-ARC123D-Inc-Dec-Decomposition-2100\" class=\"headerlink\" title=\"19.ARC123D Inc, Dec - Decomposition *2100\"></a>19.ARC123D Inc, Dec - Decomposition *2100</h3><p>简单题啊，居然有自己能很快做出来的题，尝试构造 $b,c$，这是简单的，感性理解一下，然后三分一下偏差值就是答案了。</p>\n<p>三分可以理解正确性，但是为什么想我那样构造就是答案了呢，其他的构造方法对吗？感觉很奇怪啊。</p>\n<h3 id=\"20-CF1270H-Number-of-Components-3300\"><a href=\"#20-CF1270H-Number-of-Components-3300\" class=\"headerlink\" title=\"20.CF1270H Number of Components *3300\"></a>20.CF1270H Number of Components *3300</h3><p>先发现一个性质：如果 $l$ 和 $r$ 在一个联通块内，那么 $[l , r]$ 就都在一个联通块内，证明是容易的。</p>\n<p>发现了这个性质之后，我们只需要求 $i$ 和 $i + 1$ 是否在一个联通块内。具体的判断方式是 $\\min_{j=1} ^{i} a_j \\ge max_{j=i+1}^{n} a_j$。记 $w=max_{j=i+1}^{n} a_j$，把数组内大于 $w$ 的设为 $1$，否则设为 $0$。如果 $i$ 和 $i + 1$ 不在同一联通块内那么二进制序列会长成 $11…100…0$ 这个样子，对于每个w维护一下10段的个数即可。</p>\n<h3 id=\"21-CF1548E-Gregor-and-the-Two-Painters-3400\"><a href=\"#21-CF1548E-Gregor-and-the-Two-Painters-3400\" class=\"headerlink\" title=\"21.CF1548E Gregor and the Two Painters *3400\"></a>21.CF1548E Gregor and the Two Painters *3400</h3><p>可以说是一种套路题吧，数网格联通块通用方法就是选个主元，去数有多少个主元，转化成求解偏序问题即可。</p>\n<p>注意主元和联通块要有双射关系，不然就假了。这个方法也可以做 SCCPC2024 A 虽然那个题有更简单的方法。</p>\n<h3 id=\"22-CF1656G-Cycle-Palindrome-3200\"><a href=\"#22-CF1656G-Cycle-Palindrome-3200\" class=\"headerlink\" title=\"22.CF1656G Cycle Palindrome *3200\"></a>22.CF1656G Cycle Palindrome *3200</h3><p>先考虑构造一组满足回文的排列，再考虑交换相同值的位置使得在同一个环中。</p>\n<p>然后再四个四个地换，判一下就行。正确性证明是困难的，不证了。</p>\n<h3 id=\"23-ARC156D-Xor-Sum-5-2600\"><a href=\"#23-ARC156D-Xor-Sum-5-2600\" class=\"headerlink\" title=\"23.ARC156D Xor Sum 5 *2600\"></a>23.ARC156D Xor Sum 5 *2600</h3><p>记一个牛逼结论：<strong>若组合数 $\\binom{n}{m}$ 是奇数，那么在二进制下，m是n的子集</strong></p>\n<p>推论：<strong>$\\binom{n}{c1,c2,c3…ck}$为奇数，那么c是n的某一子集的一组二进制划分</strong></p>\n<p>我们就记 $c_i$ 表示第 $i$ 个数的出现次数，当他的sum有贡献时，他就是上文的推论。</p>\n<p>所以发现最多40个 $c_i$ 是非零的，于是乎就可以DP了。</p>\n<h3 id=\"24-ABC271G-Access-Counter-2300\"><a href=\"#24-ABC271G-Access-Counter-2300\" class=\"headerlink\" title=\"24.ABC271G Access Counter * 2300\"></a>24.ABC271G Access Counter * 2300</h3><p>很难不想到矩阵快速幂，但是问题在于我怎么构造矩阵，这是本题的难点。</p>\n<p>首先是容易设计出基本DP的， $dp_{i,j}=\\sum_{k=1}^{24}dp_{i-1,k}\\times calc(k,j)$</p>\n<p>calc通过一些基本数列手段可以是可以处理出来的，然后挂到矩阵这题也就结束了。</p>\n<h3 id=\"25-CF1042E-Vasya-and-Magic-Matrix-2300\"><a href=\"#25-CF1042E-Vasya-and-Magic-Matrix-2300\" class=\"headerlink\" title=\"25.CF1042E Vasya and Magic Matrix *2300\"></a>25.CF1042E Vasya and Magic Matrix *2300</h3><p>朴素的期望DP，好像期望DP都是倒着的，大概就是从终状态转移到始状态的意思。</p>\n<p>矩阵的壳是个幌子，根本无需在意，把每个东西单拎出来按权排序后DP即可。</p>\n<h3 id=\"26-CF1552E-Colors-and-Intervals-2300\"><a href=\"#26-CF1552E-Colors-and-Intervals-2300\" class=\"headerlink\" title=\"26.CF1552E Colors and Intervals *2300\"></a>26.CF1552E Colors and Intervals *2300</h3><p>牛的构造题，先观察到每次选的两个点之间一定没有和它们同色的点，不然一定不优。</p>\n<p>每个东西被覆盖的次数限制很奇怪，考虑它的意义是什么。看见分母的 $k-1$ 不难联想到同一颜色的段数，那么考虑按段的编号分类，每个段就选限制个颜色即可。</p>\n<h3 id=\"27-CF1635F-Closest-Pair-2800\"><a href=\"#27-CF1635F-Closest-Pair-2800\" class=\"headerlink\" title=\"27.CF1635F Closest Pair *2800\"></a>27.CF1635F Closest Pair *2800</h3><p>结论题，设 $L_i$ 表示 $i$ 左边第一个 $w$ 小于等于 i的点，$R_i$ 同理。</p>\n<p>那么答案就在 $[L_i,i],[i,R_i]$ 中。转化为二维数点问题即可。</p>\n<h3 id=\"28-CF1868C-Travel-Plan-2400\"><a href=\"#28-CF1868C-Travel-Plan-2400\" class=\"headerlink\" title=\"28.CF1868C Travel Plan *2400\"></a>28.CF1868C Travel Plan *2400</h3><p>式子题，考虑对于满二叉树怎么做，会了这个就把原数拆成 $logn$ 个满二叉树即可。</p>\n<p>具体的，枚举最大值，记 $ans_i$ 表示最大值 $\\le i$ 的答案，那么最后答案就是 $\\sum_{i=1}^{m}i\\times (ans_i - ans_{i-1})$</p>\n<p>对于具体的转移不多赘述，主要就是记两个东西，一个表示这个子树所有东西到根的答案和子树内所以东西的填法的和。</p>\n<h3 id=\"29-CF599E-Sandy-and-Nuts-2600\"><a href=\"#29-CF599E-Sandy-and-Nuts-2600\" class=\"headerlink\" title=\"29.CF599E Sandy and Nuts *2600\"></a>29.CF599E Sandy and Nuts *2600</h3><p>困难的，状态想错了导致举步维艰，想到状态之后这题并不困难，主要是处理限制的时候要稍微注意一下细节。状态是 $dp_{i,S}$ 表示以 $i$ 为根的子树内的点集为 $S$ 的合法方案数。方程就是 $dp_{i,S}=\\sum_{T\\in S} dp_{u,T}\\times dp_{i , S\\oplus T}$。使用钦定技巧避免算重。</p>\n<h3 id=\"30-CF623D-Birthday-2700\"><a href=\"#30-CF623D-Birthday-2700\" class=\"headerlink\" title=\"30.CF623D Birthday *2700\"></a>30.CF623D Birthday *2700</h3><p>难点解析：揣测出题人。</p>\n<p>为啥不让你求模意义下的答案，精度误差为啥允许开这么大，样例解释为啥没有计算过程？有没有种可能，真实值根本算不出来？</p>\n<p>想到这里这题大概也就迎刃而解了，计算k轮猜到答案的概率。直接做不好做，考虑容斥进行计算。具体的，计算在最多 $k$ 轮的时候结束的概率。要是知道每个人被猜到几次的话就很容易算概率了。列出式子，每一步贪心即可。收敛速度较快，计算 $3e5$ 次即可通过此题。</p>\n<h3 id=\"31-CF407D-Largest-Submatrix-3-2700\"><a href=\"#31-CF407D-Largest-Submatrix-3-2700\" class=\"headerlink\" title=\"31.CF407D Largest Submatrix 3 *2700\"></a>31.CF407D Largest Submatrix 3 *2700</h3><p>不难想到 $O(n^4)$ 暴力，枚举行的上下界，对列跑双指针。这个算法难以优化，更换枚举次序。枚举左右界再枚举下边界，类似于区间DP得去转移答案。（子矩阵背景的题目从来没有自己做出来过，呜呜呜）</p>\n<h3 id=\"32-CF1844G-Tree-Weight-3000\"><a href=\"#32-CF1844G-Tree-Weight-3000\" class=\"headerlink\" title=\"32.CF1844G Tree Weight *3000\"></a>32.CF1844G Tree Weight *3000</h3><p>牛逼题目，这辈子没见过这么秀的。</p>\n<p>首先容易把 $d_i$ 拆成 $dep_i + dep_{i + 1} - 2 \\times dep_{lca(i,i+1)}$</p>\n<p>然后就会发现这个东西非常不优美，要是能够拆出来的东西少带点变量就好了，因为 $dep_1$ 我们是知道的，他就是0。少带点变量就会使得这个式子可以递推了！<strong>注意到lca前面有个系数2，对等式两边取个2的模这个东西就没了！</strong> 然后我们就可以考虑按二进制位进行递推了。具体的，设 $ans_{i,j}\\equiv dep_{i} \\mod 2^j$。 那么有 $ans_{i,j}={(d(i-1,i)-ans_{i-1,j}+2\\times ans_{lca(i-1,i),j-1})} \\mod 2^j$最后判一下-1即可。注意力惊人的人可以独立做出来，可惜我不是。</p>\n<h3 id=\"33-CF1762D-GCD-Queries-2100\"><a href=\"#33-CF1762D-GCD-Queries-2100\" class=\"headerlink\" title=\"33.CF1762D GCD Queries *2100\"></a>33.CF1762D GCD Queries *2100</h3><p>似乎是比较容易的。其实无非就是就是让你每两次操作排除一个非零的数。按顺序遍历配合上指针优化再加上简单的分讨即可。</p>\n<h3 id=\"34-CF1406E-Deleting-Numbers-2600\"><a href=\"#34-CF1406E-Deleting-Numbers-2600\" class=\"headerlink\" title=\"34.CF1406E Deleting Numbers *2600\"></a>34.CF1406E Deleting Numbers *2600</h3><p>非常厉害的交互！有点人类智慧的感觉。</p>\n<p>首先是容易想到一个每个质数操作两次在log一下的方法，算算发现操作次数会超。</p>\n<p>考虑优化。显然对于上述做法而言，质数这个点是不会变的，那能不能让没啥用每个质数只操作1次呢。</p>\n<p>可以的，我们依次对每个质数操作B，然后计算出理论答案，要是不一样的话我们就check一下它的幂次。</p>\n<p>可是这样对于最小的质数而言，我们就没法求了。所以每过根号次操作就做一遍 A 1。要是有出入就把块内所有东西都判一遍即可。</p>\n<h3 id=\"35-CF1033E-Hidden-Bipartite-Graph-2800\"><a href=\"#35-CF1033E-Hidden-Bipartite-Graph-2800\" class=\"headerlink\" title=\"35.CF1033E Hidden Bipartite Graph *2800\"></a>35.CF1033E Hidden Bipartite Graph *2800</h3><p>也是非常厉害的交互！更加的人类智慧！</p>\n<p>积累一种不一样的判二分图的trick：图中抽一棵生成树，看一下奇数层的点之间有没有连边，偶数层之间有没有连边。</p>\n<p>对于这个题而言我们可以先用 $2nlogn$ 次询问分治的去问出一棵生成树来。然后我们再在奇偶层之间随机分治看看有没连边。很巧妙的是这个随机分治，每次把点集大小除以二而且每一层期望操作次数只有两次，非常聪明啊！</p>\n<h3 id=\"36-CF1863G-Swaps-2800\"><a href=\"#36-CF1863G-Swaps-2800\" class=\"headerlink\" title=\"36.CF1863G Swaps *2800\"></a>36.CF1863G Swaps *2800</h3><p>套路题？容易想到 $a_i$ 向 $i$ 连条边。然后观察一次操作带来的影响，发现一次操作带来一个自环。同时可以构建出一个双射：能生成的序列可以这样构成：如果 $i$ 的入边被操作过，那么这个位置就是 $i$，否则就是一条未被标记的出边指向的点权，这是容易计数的，注意在联通块为环时特殊处理一下即可。</p>\n<h3 id=\"37-JOISC2015-F-合鍵\"><a href=\"#37-JOISC2015-F-合鍵\" class=\"headerlink\" title=\"37.JOISC2015 F 合鍵\"></a>37.JOISC2015 F 合鍵</h3><p>非常好题目，让我认识到自己的不足：对于奇怪的模型就失去了分析的能力。</p>\n<p><strong>容易想到</strong> 把 $l,r$ 拆开一起排序，分讨每一段的贡献情况，然后DP统计贡献即可。</p>\n<h3 id=\"38-ABC373G-No-Cross-Matching-2400\"><a href=\"#38-ABC373G-No-Cross-Matching-2400\" class=\"headerlink\" title=\"38.ABC373G No Cross Matching *2400\"></a>38.ABC373G No Cross Matching *2400</h3><p>场上的时候有种流子的感觉，但是不会建模。现在会了神秘贪心。</p>\n<p>非常厉害的转化，相交线段可以通过交换变得不相交，这会使得总距离变短，那么我们是需要让总距离最短即可，按照冒泡排序模拟即可。</p>\n<h3 id=\"39-Yahoo-Programming-Contest-2019-Odd-Subrectangles-2600\"><a href=\"#39-Yahoo-Programming-Contest-2019-Odd-Subrectangles-2600\" class=\"headerlink\" title=\"39.Yahoo Programming Contest 2019 Odd Subrectangles *2600\"></a>39.Yahoo Programming Contest 2019 Odd Subrectangles *2600</h3><p>容易想到转化为异或为1。考虑现在已经选出了一些行，那些列符合答案，记第 $i$ 列的异或和为 $c_i$ ，只要有一个 $c_i$ 等于1，那么这就意味着方案数是 $2^{m-1}$，其他列情况任选，用这一列来调整即可。那么现在思考怎么选行能够使得至少有一个1，把每行当成一个二进制数，这个问题就转化成了怎么选使异或和部位0，为0是简单的，记 $x$ 表示线性基的大小，然后异或和为0的方案数就是 $2^{n - x}$，证明原理和刚才一样。</p>\n<h3 id=\"40-CF513D-Constrained-Tree-2600\"><a href=\"#40-CF513D-Constrained-Tree-2600\" class=\"headerlink\" title=\"40.CF513D Constrained Tree *2600\"></a>40.CF513D Constrained Tree *2600</h3><p>自己的思路是转化成偏序问题后瞎构造，不会证明正确性，也没有实践，来记个题解做法。</p>\n<p>大概就是去dfs，dfs(u) 表示 $u$ 是一个叶子时的可行性，然后简单判断几下递归下去是简单的。</p>\n<h3 id=\"41-CF1699E-Three-Days-Grace-2600\"><a href=\"#41-CF1699E-Three-Days-Grace-2600\" class=\"headerlink\" title=\"41.CF1699E Three Days Grace *2600\"></a>41.CF1699E Three Days Grace *2600</h3><p>这题DP？我咋想到？分析整个删数的过程，容易发现就是分解而已。想到去枚举一个最小值，让最大值最小，考虑 $dp_{i,j}$ 表示分解出来最小的数比 $i$ 大，最大的数最小是多少，发现转移是调和级数级别的，双指针找答案即可。</p>\n<h3 id=\"42-CF547D-Mike-and-Fish-2600\"><a href=\"#42-CF547D-Mike-and-Fish-2600\" class=\"headerlink\" title=\"42.CF547D Mike and Fish *2600\"></a>42.CF547D Mike and Fish *2600</h3><p>这种染色问题再配上这个网格图背景，很难不让人想到二分图染色。考虑怎么进行染色，有一种很简单的方法是相同横或纵坐标的点两两配对，要是剩一个就不管了，不难证明这是正确的。</p>\n<h3 id=\"43-CF1253F-Cheap-Robot-2500\"><a href=\"#43-CF1253F-Cheap-Robot-2500\" class=\"headerlink\" title=\"43.CF1253F Cheap Robot *2500\"></a>43.CF1253F Cheap Robot *2500</h3><p>感觉是困难的。遇到这种图上多询问的问题就先不要往什么LCT这种东西方面去思考，实在不行再试试，然后考虑对于单个询问怎么做，要求的答案根据什么量推出来，把图上有用的东西再留下来，看看在树上怎么做。这题就这样的，看两个相邻的充电站想要抵达对 $c$ 的限制是什么，化成一个关于c的不等式，然后放在重构树上询问就可以了。</p>\n<h3 id=\"44-CF53E-Dead-Ends-2500\"><a href=\"#44-CF53E-Dead-Ends-2500\" class=\"headerlink\" title=\"44.CF53E Dead Ends *2500\"></a>44.CF53E Dead Ends *2500</h3><p>似乎是简单的，反正我秒了。看见数据范围这样的小，看来是DP状态需要两个状压维，那DP状态就出来了, $dp_{S,T}$ 表示形成的生成树是 $S$ 集合，度为一的点是 $T$ 集合，发现要算重，再回头看看转移方程，是不是方案算了 $popcount(T)$ 次呢？所以除一下就好了。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm27gdyu20000p59lhxme1mle","category_id":"cm27gdyu70002p59l75m54mm5","_id":"cm27gdyu90005p59l3t235avg"},{"post_id":"cm27gdyu50001p59l1m5v7vf6","category_id":"cm27gdyu90004p59lhgmtado5","_id":"cm27gdyub0007p59lblln9q2e"},{"post_id":"cm27gdyu80003p59l7e31a81m","category_id":"cm27gdyu90004p59lhgmtado5","_id":"cm27gdyub0008p59l2yaa82z7"}],"PostTag":[],"Tag":[]}}